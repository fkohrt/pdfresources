% \iffalse meta-comment
%
%% File: l3pdffile.dtx
%
% Copyright (C) 2018-2020 The LaTeX3 Project
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    http://www.latex-project.org/lppl.txt
%
% This file is part of the "(experimental) pdfresources bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/latex3/pdfresources
%
% for those people who are interested.
%
%<*driver>
\RequirePackage{expl3}
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \pkg{l3pdffile} package\\ Embedding and referencing files in a PDF ^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released XXXX-XX-XX}
%
% \maketitle
% \begin{documentation}
%
% \section{\pkg{l3pdffile} documentation}
% External files can be referenced from a PDF in three ways:
% \begin{enumerate}
% \item through an normal url link,
% \item by referencing a local file in the file system,
% \item by embedding the file directly into the PDF.
% \end{enumerate}
%
% Url links (1) are created with the \cs{pdfannot} commands.
%
% This module handles the two last possibilities. Actually from the view
% of the PDF format they are quite similar:
% In both cases the core dictionaries are /FileSpec dictionaries which similar entries.
% In the embedding case there is only an additional /EF entry which points to the
% stream object of the file.
%
% The tasks to embed and reference such file are
% \begin{enumerate}
% \item Embed the file in a stream. (This is optional).
% \item Create a FileSpec dictionary which if needed reference the embedded file.
% \item Reference the FileSpec dictionary so that the user can access the file.
%       This can be done in various way:
%       \begin{enumerate}
%       \item With an annotation (/Subtype/FileAttachment). This done by
%       attachfile, attachfile2 and intopdf. Typical entries of such an annotation
%       are:
%
%             \begin{tabular}{lll}
%             FS      & object reference &(FileSpec dictionary)\\
%             Name    & name           & Graph, PushPin, Paperclip, Tag\\
%             Contents & text string & optional but recommended\\
%             F        & integer     & Flags\\
%             AP       & dictionary  & Appearance (required if rectangle >0) \\
%             AS       & name\\
%             \end{tabular}
%
%             The AP takes precedance over Border and similar keys.
%       \item Through an entry in the EmbeddedFiles name tree. This what embedfiles does.
%       \begin{verbatim}
%       20 0 obj %Document Name tree
%        <</EmbeddedFiles 21 0 R>>
%           endobj
%         21 0 obj %Embedded Files Name dictionary
%        <</Names [(AcmeCustomCrypto Protected PDF.pdf) 17 0 R]>>
%        endobj
%       \end{verbatim}
%       \item Through the /AF key in various objects (pdf 2.0), the value is normally an array of object
%       references.
%        But it can also be a name which is mapped to an array in /Properties:
%        \begin{verbatim}
%        /AF /NamedAF BDC
%        /Properties <</NamedAF [12 0 R]
%        \end{verbatim}
%        The related FileSpec dictionary should contain an /AFRelationship key in this case.
%       \end{enumerate}
% \end{enumerate}
%
% \begin{verbatim}
% <<
% /Type /Filespec
% /F (l3pdffile.dtx)
% /UF (l3pdffile.dtx)
% /AFRelationship /Source
% /EF <</F 21 0 R>>   %case 3, embedded file
% >>
% \end{verbatim}
%
%\subsection{Embedding a file}
% Embedding an existing file is in most cases quite straightforward. It can be done with
% \cs{pdf_object_now:nn} or \cs{\pdf_object_new:nn}/\cs{pdf_object_write:nn}.
% In the first variant one should then store the object number for the reference
% in the /FileSpec dictionary.
%
% \begin{verbatim}
% \pdf_object_now:nx {fstream}
%   {
%     {
%       /Type /EmbeddedFile
%       /Subtype /application\c_hash_str2Fpostscript
%       /Params
%         <<
%           /ModDate  ~ (\file_timestamp:n{example-image.eps})
%           /Size     ~  \file_size:n {example-image.eps}
%           /CheckSum ~ (\file_mdfive_hash:n {example-image.eps})
%          >>
%     }
%     {example-image.eps}
%   }
% \tl_set:Nx \l_my_fileobj_tl {\pdf_object_last:}
% \end{verbatim}
%
% Remarks:
% \begin{itemize}
% \item The /Params dictionary is not always required, but as the basic data
% are easily accessed it makes sense to add it automatically. Users will
% perhaps want to add also CreationDate here.
% \item The mimetype (in the /Subtype) can not be detected automatically but must
% be added by the user.
% \item The dictionary can contain additional keys (/Filter, /DecodeParms)
% \item The dictionary can actually refer to an external file (in which case the
% stream is ignored.
% \end{itemize}
%
% Implementation: There will be two local dictionaries, embeddedfile and embeddedfile/Params.
% The embeddedfile/Params will have default settings. The dictionaries are used to
% build the attributes of the object.
%
%
%
%
% \begin{function}{\pdffile_embed:nN}
%   \begin{syntax}
%     \cs{pdffile_embed:nN} \Arg{filename} \meta{tl var}
%   \end{syntax}
%   This commands embeds the file \Arg{filename} in the PDF and stores the
%   object reference in \meta{tl var}. It uses the content of the local
%   dictionaries \texttt{embeddedfile} and \texttt{embeddedfile/Params} to setup
%   the dictionary entries of the stream object.
% \end{function}
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3pdffile} implementation}
%
%    \begin{macrocode}
%<*package>
\ProvidesExplPackage {l3pdffile} {2020-04-21} {0.1}
  {embedding and referencing files in PDF}
\RequirePackage{new-pdfescape}  %temporarly!!
%    \end{macrocode}
%
%    \begin{macrocode}
%<@@=pdf>
%    \end{macrocode}
% \begin{NOTE}{UF}
% should the default value be stored in dedicated commands or tl vars?
% \end{NOTE}
% \begin{variable}
%  {
%   \l_pdffile_embed_curfilename_tl
%  }
% \cs{l_pdffile_embed_curfilename_tl} will be set at the begin of the command, and
% so can be used in dictionary values or other references.
%    \begin{macrocode}
\tl_new:N \l_pdffile_embed_filename_tl

\pdfdict_new:n {embeddedfile}
\pdfdict_new:n {embeddedfile/Params}

\pdfdict_put:nnn {embeddedfile/Params}
  {ModDate}  { (\file_timestamp:n { \l_pdffile_embed_filename_tl }) }
\pdfdict_put:nnn {embeddedfile/Params}
  {Size}     { \file_size:n { \l_pdffile_embed_filename_tl } }
\pdfdict_put:nnn {embeddedfile/Params}
  {CheckSum} { (\file_mdfive_hash:n { \l_pdffile_embed_filename_tl }) }
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\pdffile_embed:nN}
%    \begin{macrocode}
\cs_new_protected:Npn \pdffile_embed:nN #1 #2
  {
    \tl_set:Nn \l_pdffile_embed_filename_tl {#1}
    \pdf_object_now:nx {fstream}
      {
       {
        \pdfdict_map:n {embeddedfile}
        \pdfdict_if_empty:nF {embeddedfile/Params}
         {
          /Params
           <<
            \pdfdict_map:n {embeddedfile/Params}
           >>
         }
       }
       { #1 }
      }
    \tl_set:Nx #2 {\pdf_object_last:}
  }
%    \end{macrocode}
% \end{macro}
%

%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
