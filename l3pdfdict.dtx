% \iffalse meta-comment
%
%% File: l3pdfdict.dtx
%
% Copyright (C) 2018-2020 The LaTeX3 Project
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    http://www.latex-project.org/lppl.txt
%
% This file is part of the "(experimental) pdfresources bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/latex3/pdfresources
%
% for those people who are interested.
%
%<*driver>
\RequirePackage{expl3}
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \pkg{l3pdfdict} package\\ Managing global and local dictionaries ^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released XXXX-XX-XX}
%
% \maketitle
% \begin{documentation}
%
% \section{\pkg{l3pdfdict} documentation}
% Many features of a PDF are set by adding a (pdf-)Name and a value
% to specific PDF dictionaries. The commands in this module offer an interface to
% these dictionaries. They unify a number of primitives like the pdftex
% registers \cs{pdfcatalog}, \cs{pdfpagesattr}, \cs{pdfinfo} and similar commands
% of the other backends  in a backend independant way.
%
% There are two distinct types of dictionaries
% \begin{description}
%    \item[Global dictionaries] These are dictionaries which are inserted only
%    once in a PDF or only once per page. Examples are the Catalog dictionary,
%    the Info dictionary, the page resources. For these dictionaries it is necessary
%    that all package which want to write to them uses the interface provided
%    by this module to avoid clashes and incompatibilities. Values to these
%    dictionaries are always added globally and written by the code
%    at a suitable time to the PDF.
%    Global dictionaries are set and manipulated with the global commands, e.g.
%    \cs{pdf_dict_gput:nnn}. Global dictionaries have names starting with an
%    uppercase letter.
%
%    \item[Local dictionaries ] These are dictionaries which are used in varying
%    numberswith varying content. Examples are attributes of links,
%    filespec dictionaries, xform dictionaries. The main purpose of the code
%    here is to give packages and users a better interface to add or
%    change values of such objects.
%
%    Local dictionaries are set and manipulated with the local commands, e.g.
%    \cs{pdf_dict_put:nnn}. By convention their name start with a lowercase.
%  \end{description}
%
% The following tabular summarize the dictionaries and which pdftex primitive they
% replace:
% \begin{tabular}{lll}
%  Info                                  & \cs{pdfinfo}    &global\\
%  Catalog \&  various subdictionaries   & \cs{pdfcatalog} &global\\
%  Pages                                 & \cs{pdfpagesattr}&global\\
%  Page, ThisPage                        & \cs{pdfpageattr}&global\\
%  Page/Resources/ExtGState              & \cs{pdfpageresources}&global\\
%  Page/Resources/Shading                & \cs{pdfpageresources}&global\\
%  Page/Resources/Pattern                & \cs{pdfpageresources}&global\\
%  Page/Resources/ColorSpace             & \cs{pdfpageresources}&global\\%
%  xform\ldots                           & argument of \cs{pdfxform} &local\\
%  annot\ldots                           & argument of \cs{pdfannot},
%                                          \cs{pdfstartlink} &local\\
%  \end{tabular}
%
%  The /Properties dictionary of the page resources is not handled by this module. It is
%  filled and managed through side effects when setting BDC-marks.
%  \subsection{User Commands}
% \begin{NOTE}{UF}
% global: upper case: Catalog, Pages.
% local:  lower case: annot/link/URI.
% \end{NOTE}
% \begin{function}[added = 2020-04-21]
%   {\pdfdict_new:n}
%   \begin{syntax}
%     \cs{pdfdict_new:n} \Arg{local dictionary name}
%   \end{syntax}
% This function create a new local dictionary.
% \end{function}
% \begin{function}[added = 2020-04-06]
%   {\pdfdict_put:nnn, \pdfdict_gput:nnn}
%   \begin{syntax}
%     \cs{pdfdict_gput:nnn} \Arg{global dictionary} \Arg{name} \Arg{value}\\
%     \cs{pdfdict_put:nnn} \Arg{local dictionary} \Arg{name} \Arg{value}
%   \end{syntax}
% This function puts \Arg{name} \Arg{value} either globally or locally in internal
% property lists.
%
% \Arg{dictionary} is a symbolic name for a concrete PDF dictionary to which the
% content of these property lists will be written by the PDF resource management code.
%
% \Arg{name} should be a valid PDF Name without
% the starting slash.
%
% \Arg{value} should be a valid PDF value for this Name in the
% target dictionary.
%
% The PDF resource management code predefines a large number of
% symbolic names for important dictionaries and will write the stored values
% at the right time to the PDF. The predefined symbolic names are described below.
% By convention, dictionaries starting with an uppercase letter are always stored
% globally (e.g. \texttt{Catalog} or \texttt{Info}, lowercase letters indicates
% dictionaries that respect \TeX-groups -- this is e.g. used for dictionaries used in
% local objects like links.
%
% The code works with all major engines but not necessarily
% in the same way. Most importantly
% \begin{itemize}
% \item The expansion behaviour of the backends can differ. Some backends expand a
% value always fully when writing to the PDF, with other backends command names
% could end as strings in the PDF. So one should neither rely on \Arg{name}
% \Arg{value} to be expanded nor not expanded by the backend commands.
% \item The number of compilations needed can differ between the engines and backends.
% Some engines has to use labels and the aux-file to setup the dictionaries and so need
% at least two compilations to put everything in place.
% \end{itemize}
% \end{function}

% \end{documentation}
%
% \begin{implementation}
%<@@=pdf>
%<*package>
\ProvidesExplPackage {l3pdfdict} {2020-04-08} {0.5}
  {Managing global and local dictionaries}
% \section{\pkg{l3pdfdict} implementation}
% \begin{macro}{\pdfdict_new:n}
%    \begin{macrocode}
\cs_new_protected:Npn \pdfdict_new:n #1
  {
    \@@_dict_new:n {#1}
  }
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
%    \end{macrocode}
%    \begin{macrocode}
\cs_new_protected:Npn \pdfdict_put:nnn #1 #2 #3
  {
    \@@_dict_if_local:nTF { #1 }
      {
        \@@_dict_handler_put:nnn { #1 }{ #2 }{ #3 }
      }
      {
        \msg_error:nnnn{pdfdict}{wrong-or-unknown-dict}{#1}{local}
      }
  }

\cs_new_protected:Npn \pdfdict_gput:nnn #1 #2 #3
  {
    \@@_dict_if_global:nTF { #1 }
      {
        \@@_dict_handler_put:nnn { #1 }{ #2 }{ #3 }
      }
      {
        \msg_error:nnnn{pdfdict}{wrong-or-unknown-dict}{#1}{global}
      }
  }

\cs_generate_variant:Nn \pdfdict_put:nnn {nnx,nno}
\cs_generate_variant:Nn \pdfdict_gput:nnn {nnx}
%    \end{macrocode}
% \subsection{Internal dictionary Code}
%  Many code parts are quite similar: property lists for
%  dictionaries are filled and output.
%  So we define some generic commands to ensure systematic
%  internal names. The names are based on paths separated by slashed.
%  The first slash is not used in the names.
%
%  Currently the following names are used: ^^A!!!!! check, compare with g_@@_dict_gnames_seq
%  \begin{verbatim}
%  /Info                      %    (\pdfinfo)
%  /Catalog                   %    (\pdfcatalog)
%  /Catalog/AA                %
%  /Catalog/AcroForm
%  /Catalog/OCProperties
%  /Catalog/OutputIntents
%  /Catalog/AcroForm/DR
%  /Catalog/AcroForm/DR/Font
%  /Catalog/MarkInfo
%  /Catalog/ViewerPreferences
%  /Pages                     %    (\pagesattr)
%  /Page                      %    (\pageattr)
%  /ThisPage                  %    (\pageattr)
%  /backend_PageN/Resources/Properties %
%  /Page/Resources/ExtGState
%  /Page/Resources/ColorSpace
%  /Page/Resources/Pattern
%  /Page/Resources/Shading
%  /Page/Resources/Properties
%  /xform/Resources/Properties
%  \end{verbatim}
% \begin{macro}{\@@_dict_item:nn,\@@_dict_objref_item:nn}
% Commands to output dict entries: The arguments are \meta{name}\meta{value} and
% \meta{name}\meta{object name}, \meta{name} should be a valid pdf name without
% the slash.
% The commands don't check if the arguments are empty or valid. This should be done
% in the pdf layer at the input.
% \begin{NOTE}{UF}
%TODO: check expansion behaviour of \cs{@@_dict_objref_item:nn} in the various uses
% \end{NOTE}
%    \begin{macrocode}
\cs_new:Npn \@@_dict_item:nn #1 #2 { /#1~#2~ } %name, value
\cs_generate_variant:Nn \@@_dict_item:nn {ne}

\cs_new:Npn \@@_dict_objref_item:nn #1 #2      %name, object name
  {
    /#1~\@@_backend_object_ref:n { #2 }
  }
%    \end{macrocode}
% \end{macro}
% \begin{macro}
%   {
%    \@@_dict_get_g:n,
%    \@@_dict_gname:n,
%    \@@_dict_name:n,
%    \@@_dict_gnew:n,
%    \@@_dict_new:n,
%    \g_@@_dict_gnames_seq,
%    \g_@@_dict_names_seq
%   }
%   \cs{@@_dict_get_g:n} gives back a \enquote{g} if the dictionary is global.
%    \begin{macrocode}
\seq_new:N \g_@@_dict_gnames_seq
\seq_new:N \g_@@_dict_names_seq

\tl_const:Nn \c_@@_dict_globalprefix_tl {g}
\tl_const:Nn \c_@@_dict_localprefix_tl  {}

% to retried global status from pathes
\cs_new:Npn \@@_dict_get_g:n #1 % path name without the leading /
  {
   \tl_if_exist:cT {c_@@_dict_/#1_g_tl}
     {
      \tl_use:c {c_@@_dict_/#1_g_tl}
     }
  }

%global
\cs_new:Npn \@@_dict_gname:n #1 % path name without the leading /
  {
    g_@@_dict_/#1_prop
  }

%local
\cs_new:Npn \@@_dict_name:n #1 % path name without the leading /
  {
    l_@@_dict_/#1_prop
  }


%  hm, a bit unclear, can this work? How is expansion?
%  it falls back to prop_name if the path doesn't exist.
%  Can this lead to confusion?
%
\cs_new:Npn \@@_dict_Xname:n #1 % path name without the leading /
  {
    \use:c { @@_dict_\@@_dict_get_g:n{#1}name:n } { #1 }
  }

%global
\cs_new_protected:Npn \@@_dict_gnew:n #1
  {
    \@@_dict_if_exist:nTF { #1 }
      {
        \msg_error:nnx
          { pdfdict }
          { dict-already-defined }
          { #1}
       }
      {
        \tl_const:cn { c_@@_dict_/#1_g_tl } { g }
        \prop_new:c  { \@@_dict_gname:n { #1 } }
        \seq_gput_right:Nn \g_@@_dict_gnames_seq { #1 }
      }
  }

%local
\cs_new_protected:Npn \@@_dict_new:n #1
  {
    \@@_dict_if_exist:nTF { #1 }
      {
        \msg_error:nnx
          { pdfdict }
          { dict-already-defined }
          { #1}
       }
      {
        \tl_const:cn { c_@@_dict_/#1_g_tl } {  }
        \prop_new:c  { \@@_dict_name:n { #1 } }
        \seq_gput_right:Nn \g_@@_dict_names_seq { #1 }
      }
  }

% test existence
\prg_new_conditional:Npnn \@@_dict_if_exist:n #1 { p , T , F , TF }
  {
    \tl_if_exist:cTF
      { c_@@_dict_/#1_g_tl }
      { \prg_return_true: }
      { \prg_return_false: }
  }
% test if global, non existing dicts return false
\prg_new_conditional:Npnn \@@_dict_if_global:n #1 { p , T , F , TF }
   {
     \tl_if_eq:NcTF
        \c_@@_dict_globalprefix_tl
        { c_@@_dict_/#1_g_tl }
        { \prg_return_true: }
        { \prg_return_false: }
   }
% test if local, non existing dicts return false
\prg_new_conditional:Npnn \@@_dict_if_local:n #1 { p , T , F , TF }
   {
     \tl_if_eq:NcTF
        \c_@@_dict_localprefix_tl
        { c_@@_dict_/#1_g_tl }
        { \prg_return_true: }
        { \prg_return_false: }
   }

\prg_new_conditional:Npnn \@@_dict_if_empty:n #1 { p , T , F , TF }
  {
    \prop_if_empty:cTF
      { \@@_dict_Xname:n { #1 } }
      { \prg_return_true: }
      { \prg_return_false: }
  }
%    \end{macrocode}
%  \end{macro}
%  \begin{macro}{
%                \@@_dict_clear,
%                \@@_dict_reset,
%                \@@_dict_handler_put:nnn,
%                \@@_dict_get:nnN,
%                \@@_dict_remove:nn,
%                \@@_dict_show:n
%                }
%  \cs{@@_dict_handler_put:nnn} is the main command to fill the dictionaries.
%  In simple cases it directly fill the property list, but if a handler exists
%  this is called. It is important to use it only in places where this make sense.
%  \cs{@@_dict_put:nnn} is a simpler variant which only fills the property list.
%
%    \begin{macrocode}

%we allow only for local dictionaries a clear command
\cs_new_protected:Npn \@@_dict_clear:n #1
  {
    \@@_dict_if_local:nT { #1 }
      {
        \prop_clear:c  { \@@_dict_name:n { #1 } }
      }
  }

%reset clears and then fills with the default
\cs_new_protected:Npn \@@_dict_reset:n #1
  {
    \@@_dict_if_local:nT { #1 }
      {
        \prop_clear:c  { \@@_dict_name:n { #1 } }
        \use:c { @@_dict_#1_reset: }
      }
  }


%local + global
\cs_new_protected:Npn \@@_dict_handler_put:nnn #1 #2 #3  %#1 path, #2 name, #3 value
  {
    \tl_if_empty:nTF { #3 }
      {
        \msg_none:nnn { pdfdict }{ empty-value }{ /#1/#2 }
      }
      {
        \@@_dict_if_exist:nTF { #1 }
          {
            \cs_if_exist:cTF
              { @@_dict_handler/#1/?_\@@_dict_get_g:n{#1}put:nn } %general, name independant handler
              { \use:c {@@_dict_handler/#1/?_\@@_dict_get_g:n{#1}put:nn} {#2} {#3} }
              {
                \cs_if_exist:cTF
                  { @@_dict_handler/#1/#2_\@@_dict_get_g:n{#1}put:n }
                  { \use:c {@@_dict_handler/#1/#2_\@@_dict_get_g:n{#1}put:n} {#3} } %special handler
                  {
                    \use:c { prop_\@@_dict_get_g:n{#1}put:cnn }
                      { \@@_dict_Xname:n { #1 } }{ #2 } { #3 }
                  }
              }
          }
          {
            \msg_error:nnn { pdfdict } { unknown-dict } { /#1 }
          }
      }
  }


\cs_generate_variant:Nn \@@_dict_handler_put:nnn {nxx}

\cs_new_protected:Npn \@@_dict_put:nnn #1 #2 #3  %#1 path, #2 name, #3 value
  {
    \tl_if_empty:nTF { #3 }
      {
        \msg_none:nnn { pdfdict }{ empty-value }{ /#1/#2 }
      }
      {
       \@@_dict_if_exist:nTF { #1 }
         {
           \use:c { prop_\@@_dict_get_g:n{#1}put:cnn }
             { \@@_dict_Xname:n { #1 } }{ #2 } { #3 }
         }
         {
           \msg_error:nnn { pdfdict } { unknown-dict } { /#1 }
         }
      }
  }

%local + global

\cs_new_protected:Npn \@@_dict_get:nnN  #1 #2 #3 %path,key,macro
  {
    \prop_get:cnN
      { \use:c{ @@_dict_\tl_use:c{c_@@_dict_/#1_g_tl}name:n } { #1 } }
      { #2 } #3
  }

% local / global
\cs_new_protected:Npn \@@_dict_handler_remove:nn #1 #2 %path,key
  {
    \@@_dict_if_exist:nTF { #1 }
          {
            \cs_if_exist:cTF
              { @@_dict_handler/#1/?_\@@_dict_get_g:n{#1}remove:n } %general, name independant handler
              { \use:c {@@_dict_handler/#1/?_\@@_dict_get_g:n{#1}remove:n} {#2} }
              {
                \cs_if_exist:cTF
                  { @@_dict_handler/#1/#2_\@@_dict_get_g:n{#1}remove: }
                  { \use:c {@@_dict_handler/#1/#2_\@@_dict_get_g:n{#1}remove:} } %special handler
                  {
                    \use:c { prop_\@@_dict_get_g:n{#1}remove:cn }
                      { \@@_dict_Xname:n { #1 } }{ #2 }
                  }
              }
          }
          {
            \msg_error:nnn { pdfdict } { unknown-dict } { /#1 }
          }
  }

\cs_new_protected:Npn \@@_dict_remove:nn #1 #2 %path,key
  {
    \@@_dict_if_exist:nTF { #1 }
          {
            \use:c { prop_\@@_dict_get_g:n{#1}remove:cn }
              { \@@_dict_Xname:n { #1 } }{ #2 }
          }
          {
            \msg_error:nnn { pdfdict } { unknown-dict } { /#1 }
          }
  }


\cs_new_protected:Npn \@@_dict_show:Nn #1#2
  {
    \cs_if_exist:cTF
      { @@_dict_handler/#2/?_show: } %general, name independant handler
      { \use:c {@@_dict_handler/#2/?_show:} }
      {
        \prop_if_exist:cTF { \@@_dict_Xname:n { #2 } }
          {
             #1
               { pdfdict } { show-dict }
               { \tl_to_str:n {#2} }
               { \prop_map_function:cN {\@@_dict_Xname:n { #2 }} \msg_show_item:nn }
               { } { }
          }
          {
            #1 { pdfdict } { unknown-dict } {#2}{}{}{}
          }
       }
  }
\cs_new_protected:Npn \@@_dict_show:n #1  %path
  {
    \prop_show:c { \use:c{ @@_dict_\@@_dict_get_g:n{#1}name:n } { #1 } }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{ \@@_dict_map:n }
% \cs{@@_dict_map:n} outputs a prop as needed in a dictionary:
%  as a list of /\meta{key} \meta{value} pairs.
%    \begin{macrocode}
%local + global
%!! Xname must be replaced later!
% !! is xexpansion the right thing?
\cs_new:Npn \@@_dict_map:n #1 %path
  {
    \prop_map_function:cN { \@@_dict_Xname:n { #1 } } \@@_dict_item:ne
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{ \@@_dict_gmerge:nnN }
% \cs{@@_dict_gmerge:nnN} merges at first the property \meta{name_1}
%  then optionally \meta{name_2} into property |#3|.
%    \begin{macrocode}
% only used globally imho so leaving the global version only for now
\cs_new_protected:Npn \@@_dict_gmerge:nnN #1 #2 #3
  {
    \prop_gset_eq:Nc #3 { \@@_dict_gname:n  { #1 } }
    \prop_if_exist:cT  { \@@_dict_gname:n  { #2 } }
      {
        \prop_map_inline:cn { \@@_dict_gname:n  { #2 } }
          {
            \prop_gput:Nnn #3 { ##1 }{ ##2 }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
