% \iffalse meta-comment
%
%% File: l3pdfpdffield-checkbox.dtx
%
% Copyright (C) 2021 The LaTeX Project
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    http://www.latex-project.org/lppl.txt
%
% This file is part of the "LaTeX PDF management testphase bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/latex3/pdfresources
%
% for those people who are interested.
%
%<*driver>
\RequirePackage{pdfmanagement-testphase}
\DeclareDocumentMetadata{pdfstandard=A-2b}
\makeatletter
\declare@file@substitution{doc.sty}{doc-v3beta.sty}
\makeatother
\documentclass[full]{l3doc}
\usepackage{array,booktabs,hyperxmp}
\hypersetup{pdfauthor=The LaTeX Project,
 pdftitle=l3pdffield-checkbox (LaTeX PDF management testphase bundle)}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
% \providecommand\hook[1]{\texttt{#1}}
% \title{^^A
%   The \pkg{l3pdffield-checkbox} module\\ Commands to create checkbox fields   ^^A
%   \\ \LaTeX{} PDF management testphase bundle
% }
%
% \author{^^A
%  The \LaTeX{} Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Version 0.00a, released 0000-00-00}
%
% \maketitle
% \begin{documentation}
% The implementation of form fields in hyperref has some bugs, see for example
% \url{https://github.com/latex3/hyperref/issues/94}. This package is a first step
% towards the goal to review and improve the code of form fields.
%
% It handles for now \emph{only} checkboxes, other form fields like radio buttons or
% text fields will follow later. It relies on the hyperref code
% to initialize the form and it requires the new PDF management code.
% The package will suppress the deprecated /NeedAppearances setting.
%
% So a typical use will look like this
%
% \begin{verbatim}
% \RequirePackage{pdfmanagement-testphase}
% \DeclareDocumentMetadata{uncompress}
% \documentclass{article}
% \usepackage{hyperref}
% \usepackage{l3pdffield-checkbox}
% \begin{document}
% \Form
% \end{verbatim}
%
% \section{Some background}
% Form fields consist of a field object and number of instances of the field:
% A checkbox can appear on more than one page or location and if one instances
% is checked all other instances follows and are checked too.
%
% All instances are in this case widget annotations and are referenced in the Kid array of the field
% object\footnote{Fields can actually build a tree: between the root field and
% widget annotations there can be more fields. The last one before the widget is
% the \emph{terminal} field, but unless a sensible
% use case comes up, I will assume that the widget annotations are direct children of
% the root and that the root field is the terminal field.}.
% This means that the code has to collect all the children and write
% out the field object at the end of the document.
%
% If a field has only one children the content of the field dictionary and the
% widget annotation dictionary can be merged---some examples in the PDF reference
% show such merged dictionaries---but the code here keeps them separate, at the end
% this is clearer.
%
% All the root field objects must be referenced in the AcroForm dictionary in the
% Fields entry. This can be done with
%
% \begin{verbatim}
% \pdfmanagement_add:nnx{Catalog/AcroForm}{Fields}{<obj ref>}
% \end{verbatim}
%
% A checkbox has two different looks: checked and unchecked. The current hyperref
% implementation uses symbolic names for the two states and lets the PDF viewer
% create a look from them. But this doesn't work reliably. Also newer PDF versions
% require that such a look, an \enquote{appearance}, are given as form XObjects:
% such form XObjects are like small pictures stored in the PDF, they can be
% created with the commands of the \pkg{l3pdfxform} package.
%
% The checkbox instances---the widget annotations---cover a rectangular area on
% the page, the XObjects are squeezed into this rectangle. So for the best result
% both should have the same ratio of width and height.
% XObjects used as appearances can not be rotated, if needed one has to
% create a new appearance.
%
% \subsection{The Field dictionary}
%
% The field dictionary shall or can have the following entries
%
% \begin{description}
% \item[FT] required for terminal fields (here for the root field),
%  the value is always \texttt{Btn}, so this entry is set by the code.
% \item[Parents] currently irrelevant as we don't have a field hierarchy.
% \item[Kids] an array. Contains references to the children, in our case to
% the widget annotations. The array is build by the code.
%
% \item[T] required, the name, a (unique) text string without a period.
%  This field is a mandatory argument which must be given by the user.
% The value should be passed through a suitable string conversion and periods should
% be removed.
%
% \item[TU,TM] optional, alternative names for user messages (TU) and export (TM).
% As these fields are optional they should be set by some key-val option.
%
% \item[Ff] A bitset, two flags must be unset for a checkbox (Radio and Pushbotton),
% for the rest we need a keyval interface.
%
% \item[V] describes the initial value, for checkboxes is should be either |/Yes|
%   or |/Off|. The initial value will be |/Yes|, keys are need to set both the local
%   and the default value.
%
% \item[DV] optional, the default value after a reset. Should be her like |V| be either
% |/Yes| or |/Off|.
%
% \item[AA] An action dictionary. For this we need a special command to setup such
% dictionaries, so that they then can be used in various places.
%
% \end{description}
%
% \subsection{The widget annotation dictionary}
%
% \begin{description}
% \item[Type] Value: |/Annot|, set automatically
% \item[Subtype] Value: |/Widget| if we use the command from l3pdfannot which use
% the |l__pdfannot/widget| dictionary this is added automatically.
% Then one has to fill the rest of the entries with |\pdfannot_dict_put:nnn{widget}...|
% \item[Parent] The reference to the field, automatically added.
% \item[Rect] the size, calculated from the box size
% \item[Contents] a text string, not really need but an optional key should allow to
% set it,
% \item[AP] the appearance dictionary. It should look like this
%  |/AP <</N <</Yes 17 0 R/Off 15 0 R>>>>|. I need to test if it makes sense here to
%  have a |/R| and |/D| entry too. The objects refer to suitable xforms.
% \item[AS] should be either |/Yes| or |/Off|, and sensibly by default be
%  the same as the V entry in the field dictionary. If they differ the AS entry wins.
%
% \item[A] Action, this must be checked.
% \item[AA] additional actions. This must be checked too.
%
% \item[Border, C, OC, AF, BM, Lang, P, NM, M, F, BS, H]: These are not specifically
% needed for checkbox. An interface to add something to the used annot dictionary
% is needed (or already there), but probably no special key-val support for now.
%
% \item[MK] this is what hyperref uses to set the appearance, but I
%  explicitly leave it out and use |AP|.
%
% \end{description}
% \end{documentation}
% \begin{implementation}
%    \begin{macrocode}
%<*package>
\NeedsTeXFormat{LaTeX2e}
\ProvidesExplPackage{l3pdffield-checkbox}{0000-00-00}{v0.00a}{form field checkbox}%
%    \end{macrocode}
% \section{hyperref specific command}
% hyperref sets NeedAppearances by default. As this is deprecated we disable this.
%    \begin{macrocode}
\HyField@NeedAppearancesfalse % suppress NeedAppearances
% values from hyperref:
%\def\DefaultOptionsofCheckBox{print}
%\def\DefaultHeightofCheckBox{\normalbaselineskip}
%\def\DefaultWidthofCheckBox{\normalbaselineskip}
%    \end{macrocode}
% \section{bitsets}
% A bitset for the field flag Ff:
% Not yet decided if this should public or not ...
%    \begin{macrocode}
\bitset_new:Nn \l_pdffield_Ff_bitset
 {
    ReadOnly          = 0,
    Required          = 1,
    NoExport          = 2,
    Multiline         = 12,%Tx
    Password          = 13,
    NoToggleToOff     = 14,%Btn, radio button
    Radio             = 15,%Btn: Radio:    15=1, 16=0
    Pushbutton        = 16,%Btn: Checkbox: 15=0, 16=0
                           %Btn: Pushbutton: 16=1
    Combo             = 17,%Ch: Combo=1 List=0
    Edit              = 18,%Ch, Combo=1 -> + edit field
    Sort              = 19,%Ch, not relevant for view...
    FileSelect        = 20,%Tx
    MultiSelect       = 21,%Ch
    DoNotSpellCheck   = 22,%Tx, Ch (if Combo + Edit set)
    DoNotScroll       = 23,%Tx
    Comb              = 24,%Tx, requires MaxLen in dict
    RadiosInUnison    = 25,%Btn Radio
    RichText          = 25,%Tx
    CommitOnSelChange = 26
  }
%
%\pdf_flag_new:nn {annot/Field/submit} %name is wrong ...
%  {
%    Include/Exclude       = 0,
%    IncludeNoValueFields  = 1,
%    ExportFormat          = 2,
%    GetMethod             = 3, % if ExportFormat=0 -> =0 to
%    SubmitCoordinates     = 4, % if ExportFormat=0 -> =0 to
%    XFDF                  = 5,
%    IncludeAppendSaves    = 6,
%    IncludeAnnotations    = 7,
%    SubmitPDF             = 8,
%    CanonicalFormat       = 9,
%    ExclNonUserAnnots     = 10,
%    ExclFKey              = 11,
%    EmbedForm             = 12
%  }
%

\cs_generate_variant:Nn \pdfxform_wd:n {e}
\cs_generate_variant:Nn \pdfxform_ht:n {e}
\cs_generate_variant:Nn \pdfxform_dp:n {e}
\cs_generate_variant:Nn \pdfxform_ref:n{e}

%    \end{macrocode}
% Like in the l3pdfannot module, we hide the dictionaries
% and will offer an interface if needed.
%    \begin{macrocode}
\pdfdict_new:n {l__pdffield/checkbox/Field}
\pdfdict_new:n {l__pdffield/checkbox/Annot}


\tl_new:N \g__pdffield_normal_off_default_tl
\tl_new:N \g__pdffield_normal_yes_default_tl

\tl_set:Nn \g__pdffield_normal_off_default_tl
  {
    checkbox/Off/dflt
  }
\tl_set:Nn \g__pdffield_normal_yes_default_tl
  {
    checkbox/Yes/dflt
  }

% # local variables
\dim_new:N \l__pdffield_field_ht_dim
\dim_new:N \l__pdffield_field_wd_dim
\dim_new:N \l__pdffield_field_dp_dim
\int_new:N \l__pdffield_field_flags_int

% # l3keys variables

\tl_new:N \l__pdffield_normal_off_tl
\tl_new:N \l__pdffield_normal_yes_tl

\keys_define:nn { pdffield / checkbox }
 {
   checked .choice: ,
   checked / false .code:n =
     {
       \pdfdict_put:nnn {l_pdffield/checkbox/Field}{V}{/Off}
       \pdfdict_put:nnn {l_pdffield/checkbox/Annot}{AS}{/Off}
       \pdfdict_put:nnn {l_pdffield/checkbox/Annot}{DV}{/Off}
     },
   checked / true .code:n =
     {
       \pdfdict_put:nnn {l_pdffield/checkbox/Field}{V}{/Yes}
       \pdfdict_put:nnn {l_pdffield/checkbox/Annot}{AS}{/Yes}
       \pdfdict_put:nnn {l_pdffield/checkbox/Annot}{DV}{/Yes}
     }
 }


\NewDocumentCommand \newcheckboxappearance { s  m m  }  %#2=name, #3 = content
 {
   \pdfxform_new:nnn {#2}{}
     {
      \normalsize
      \hbox_set:Nn   \l_tmpa_box { #3 \strut }
      \IfBooleanTF {#1}
       {
        \fboxsep 0pt
        \framebox
        [ \dim_max:nn { \box_wd:N \l_tmpa_box }{ \box_ht:N\strutbox+\box_dp:N\strutbox} ]
        { \box_use:N \l_tmpa_box }
       }
       {
        \makebox
        [ \dim_max:nn { \box_wd:N \l_tmpa_box }{\box_ht:N\strutbox+\box_dp:N\strutbox} ]
        { \box_use:N \l_tmpa_box }
       }
     }
 }

\newcheckboxappearance* {checkbox/Yes/dflt}
  {
    $\times$
  }

\newcheckboxappearance* {checkbox/Off/dflt}
  {  }

\usepackage{tikz,bearwear,iftex}
\usepackage[default]{sourcesanspro}

\iftutex
\newcheckboxappearance {checkbox/Off/unicode}
 {\normalfont ☐}
\newcheckboxappearance {checkbox/Yes/unicode}
 {\normalfont ☑}
\fi

\newcheckboxappearance {checkbox/Off/tikz}
  {
   \tikz[baseline]
    \path[draw=white,fill=magenta](0,-1pt)rectangle(8pt,7pt);
  }

\newcheckboxappearance {checkbox/Yes/tikz}
   {
    \tikz[baseline]
      \path[draw=white,fill=cyan](0,-1pt)rectangle(8pt,7pt);
   }


\newcheckboxappearance {checkbox/Off/bear}
  {
   \tikz[scale=0.5]\bear;
  }

\newcheckboxappearance {checkbox/Yes/bear}
   {
    \tikz[scale=0.5]\bear\bearwear;
   }


\keys_define:nn { pdffield }
  {
    normal ~ off .tl_set_x:N = \l__pdffield_normal_off_tl,
    normal ~ off .value_required:n = true,
    normal ~ yes .tl_set_x:N = \l__pdffield_normal_yes_tl,
    normal ~ yes .value_required:n = true,
  }

\cs_new_protected:Nn \__pdffield_normalise_boxes:
  {
    \dim_set:Nn \l__pdffield_field_wd_dim
       { \dim_max:nn { \pdfxform_wd:e {\l__pdffield_normal_off_tl} }{ \pdfxform_wd:e {\l__pdffield_normal_yes_tl} } }
    \dim_set:Nn \l__pdffield_field_ht_dim
      { \dim_max:nn { \pdfxform_ht:e {\l__pdffield_normal_off_tl} }{ \pdfxform_ht:e {\l__pdffield_normal_yes_tl} } }
    \dim_set:Nn \l__pdffield_field_dp_dim
      { \dim_max:nn { \pdfxform_dp:e {\l__pdffield_normal_off_tl} }{ \pdfxform_dp:e {\l__pdffield_normal_yes_tl} } }
  }

% The field dictionary is the main object. It references the
% actual widget annotations as kids. It is created at the first
% checkbox with a specific name.
%
%

\cs_new_protected:Npn \__pdffield_checkbox_fielddict:n #1
  {
    %#1 should pass through some escaping!
    \pdf_object_if_exist:nTF {pdffield/checkbox/Field/Btn/#1}
     {
      %needed ? later
     }
     {
      \group_begin:
      \pdf_object_new:nn {pdffield/checkbox/Field/Btn/#1}      {dict}
      \pdf_object_new:nn {pdffield/checkbox/Field/Btn/#1/Kids} {array}
      \seq_new:c {g__pdffield/checkbox/Field/Btn/#1/Kids_seq}
      \hook_gput_code:nnn {shipout/lastpage}{pdf} %xetex needs this ...
        {
          %\seq_show:c {g__pdffield/checkbox/Field/Btn/#1/Kids_seq}
          \pdf_object_write:nx {pdffield/checkbox/Field/Btn/#1/Kids}
            {
              \seq_use:cn{g__pdffield/checkbox/Field/Btn/#1/Kids_seq}{~}
            }
        }
      \pdfdict_put:nnn {l_pdffield/checkbox/Field}{FT}{/Btn}
      \pdfdict_put:nnn {l_pdffield/checkbox/Field}{T}{(#1)} %escaping?
   % V,DV are names describing the appearance. With checkboxes
   % the values /Yes and /Off are used.
      \pdfdict_put:nnn {l_pdffield/checkbox/Field}{V}{/Off}  %should be configurable/in sync with /AS/DV
      \pdfdict_put:nnn {l_pdffield/checkbox/Field}{DV}{/Off} %should be configurable/in sync with /AS/DV
      \pdfdict_put:nnx {l_pdffield/checkbox/Field}{Kids}
         {
           \pdf_object_ref:n {pdffield/checkbox/Field/Btn/#1/Kids}
         }
      \bitset_set_false:Nn \l_pdffield_Ff_bitset  {Radio}
      \bitset_set_false:Nn \l_pdffield_Ff_bitset  {Pushbutton}
      %\bitset_set_true:Nn  \l_pdffield_Ff_bitset  {NoExport} %?
      \pdfdict_put:nnx {l_pdffield/checkbox/Field}
        {Ff}
        {\bitset_to_arabic:N \l_pdffield_Ff_bitset }
      \pdf_object_write:nx {pdffield/checkbox/Field/Btn/#1} { \pdfdict_use:n {l_pdffield/checkbox/Field} }
      \pdfmanagement_add:nnx
        { Catalog / AcroForm }
        { Fields }
        {\pdf_object_ref:n {pdffield/checkbox/Field/Btn/#1} }
      \group_end:
     }
  }

\cs_new_protected:Npn \__pdffield_checkbox_annot:n #1
  {
    \group_begin:
     \hbox_to_wd:nn
       { \l__pdffield_field_wd_dim  }
       {
        \rule
          [-\l__pdffield_field_dp_dim]{0pt}{\dim_eval:n{\l__pdffield_field_ht_dim+\l__pdffield_field_dp_dim}}
          \pdfannot_widget_box:nnnn
           { \dim_use:N \l__pdffield_field_wd_dim }
           { \dim_use:N \l__pdffield_field_ht_dim }
           { \dim_use:N \l__pdffield_field_dp_dim }
           {
            /Parent~ \pdf_object_ref:n{pdffield/checkbox/Field/Btn/#1}
            /AS ~ /Off
            /AP ~
              <<
                /N ~
                  << /Yes ~ \pdfxform_ref:e { \l__pdffield_normal_yes_tl}
                     /Off ~ \pdfxform_ref:e { \l__pdffield_normal_off_tl}
                  >>
              >>
           }
         \hfill
        }
    \seq_gput_right:cx {g__pdffield/checkbox/Field/Btn/#1/Kids_seq}{ \pdfannot_box_ref_last:}
    \group_end:
  }
% # form and field interface macros

\NewDocumentCommand \checkboxfield { O{}m }
  {
    \group_begin:
    \keys_set:nn { pdffield }
      {
        normal ~ yes = \g__pdffield_normal_yes_default_tl,
        normal ~ off = \g__pdffield_normal_off_default_tl,
        #1
      }
    \__pdffield_normalise_boxes:
    \__pdffield_checkbox_fielddict:n {#2}
    \__pdffield_checkbox_annot:n {#2}

    \group_end:
  }


%
%
%%%%
%
%Field dict
%Ft     : /Btn /Tx /Ch /Sig
%Parent : OR
%Kids: array, other fields or annot/widget
%T: partial fieldname (test string)
%TU: alternate description (test string)
%TM: mapping name
%Q integer (variable text field)
%Ff: flags ->pdffield/checkbox/Field
%V: value            % not pushbutton
%DV: default value   % not pushbutton
%AA: Action dict ... -> see below
%Opt: array of strings, connected to kids
%     or for choices, choices
%TI integer (lists)
%I array Ch (complicated ...)
%
%/DA ( 0 0 1 rg /Ti 12 Tf ) %text field
%/MaxLen                    %text field
%
%Lock dict (Sig)
%SV dict (Sig)
%
%
%
%
%Connected widget:
%/AS default appearance from AP ( here/Yes or /Off)
%% Appearance
%%checkbox
%/AP <</N <</Yes 2 0 R /Off 3 0 R>>>>
%/C / Border /BS
%
%/OC ?
%/Structparens?
%/F flags
%
%
%AA: Submit:
%  /S   /SubmitForm
%  /F   file /URI (/F ( ftp : / / www . beatles . com / Movies / AbbeyRoad . mov )
%  /Fields array
%
%  /S /ImportData
%  /F file
%
%  /S /ResetData
%  /Fields array
%
%  /S /JavaScript
%  /JS text string or stream
%</package>
%    \end{macrocode}
%\end{implementation}
