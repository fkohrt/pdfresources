% \iffalse meta-comment
%
%% File: pdfresources.dtx
%
% Copyright (C) 2019 The LaTeX3 Project
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
% This file is part of the "pdfresources bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/latex3/latex3
%
% for those people who are interested.
%
%<*driver>
\documentclass{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{\pkg{pdfresources}}
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released 2019-03-04}
%
% \maketitle
% \section{Existing resource usage}
%
% \subsection{\pkg{hyperref}}
%
% \subsection{\pkg{pgf}}
%
% In \pkg{pgf}, resource management is set up in the file |pgfutil-common.tex|.
% This then provides three functions for adding to the resources, all of which
% are objects:
% \begin{itemize}
%   \item \cs{pgfutil@addpdfresource@extgs}: Extended graphics state
%   \item \cs{pgfutil@addpdfresource@colorspaces}: Color spaces
%   \item \cs{pgfutil@addpdfresource@patterns}: Pattterns
% \end{itemize}
% All of these are additive.
%
% To support these functions, there are a series of set-up macros which install
% these resources. That has to take place for every page: the exact route
% therefore depends on the driver.
%
% \subsection{\pkg{media9}}
%
% \section{Managing Links}
% \subsection{new experimental l3driver commands}
% pdftex and luatex the startlink commands can use different \enquote{action spec}
% \texttt{user}, \texttt{goto} and \texttt{thread}. To be able to translate this to
% other drivers, three startlink variant are defined.
% Variants which allow also to set the rule spec are perhaps needed too.
% Currently only pdftex, luatex and xetex are setup. Some commands can probably not be
% implemented in all drivers.
%    \begin{macrocode}

\sys_if_engine_pdftex:T
{
 \cs_new_protected:Nn \driver_pdf_startlink_user:nn
 {
   \pdfstartlink
    attr { #1 }
    ~
    user { #2 }
    \relax %?needed, hyperref seems to think so
 }

 \cs_new_protected:Nn \driver_pdf_endlink:
 {
  \pdfendlink
 }

 \cs_new_protected:Nn \driver_pdf_lastlink:
 {
  \pdflastlink
 }

}

\sys_if_engine_luatex:T
{
 \cs_new_protected:Nn \driver_pdf_startlink_user:nn
 {
   \pdfextension startlink
    attr { #1 }
    ~
    user { #2 }
    \relax %?needed, hyperref seems to think so
 }

 \cs_new_protected:Nn \driver_pdf_endlink:
 {
  \pdfextension endlink
 }

 \cs_new_protected:Nn \driver_pdf_lastlink:
 {
  \numexpr\pdffeedback lastlink\relax
 }

}

\sys_if_engine_xetex:T
{
 \cs_new_protected:Nn \driver_pdf_startlink_user:nn
 {
  \special
  {
    pdf:bann
    <<
     /Type/Annot
     #1~#2
    >>
  }
 }

 \cs_new_protected:Nn \driver_pdf_endlink:
 {
  \special{pdf:eann}
 }
}
%    \end{macrocode}
%
% \subsection{Higher-level link management}
% \subsubsection{Startlink}
% packages like ocgx2 and tagpdf wants to add code to links/annotation created by hyperref.
% So we need a generic command to start a pdflink which allows packages to add
% their code to the \texttt{attr} argument through hooks.
%    \begin{macrocode}
\cs_new:Nn \pdf__get_key_value:nn { #1~#2~ } %name?????
%    \end{macrocode}
% Attributes are stored in a property list. Packages can add attributes through
% dedicated command. We assume that there will be different link types (url, file, run, \ldots)
% and that they should have their own attribute list.
% Probably we will need some commands to fill more than one prop ...
%
%    \begin{macrocode}
\prop_new:N\g__pdf_startlink_url_attr_prop
\prop_new:N\g__pdf_startlink_file_attr_prop
\prop_new:N\g__pdf_startlink_run_attr_prop

\cs_new:Nn \pdf_startlink_add_attr:nnn %#1 type, #2 key, #3 value
 {
  \prop_gput:cnn { g__pdf_startlink_#1_attr_prop } { #2 }{ #3 }
 }

\cs_new:Nn \pdf_startlink_remove_attr:nn %#1 type, #2 key
 {
  \prop_gremove:cn { g__pdf_startlink_#1_attr_prop } { #2 }
 }
%    \end{macrocode}
%
% A high-level startlink command that uses the stored attributes:
%    \begin{macrocode}
\cs_new_protected:Nn \pdf_startlink_user:nn %#1 type, #2 action spec
{
 \driver_pdf_startlink_user:nn
  {
    \prop_map_function:cN
     { g__pdf_startlink_#1_attr_prop }
     \pdf__get_key_value:nn
  }
  { #2 }
}
%    \end{macrocode}
%
% \subsubsection{Endlink}
% tagpdf needs to execute code at the end of the link to store the object reference etc.
% So we need a hook. For now the hook is a seq: This will perhaps allows a system to
% add and remove hooks by index. The hook depends on the type.
%    \begin{macrocode}
\seq_new:N \l__pdf_endlink_url_hook_seq
\seq_new:N \l__pdf_endlink_run_hook_seq
\seq_new:N \l__pdf_endlink_file_hook_seq

\cs_new_protected:Nn \pdf_endlink:n %#1 type, e.g. url
 {
  \driver_pdf_endlink:
  \seq_use:cn { l__pdf_endlink_#1_hook_seq }{}
 }


%    \end{macrocode}
% \PrintIndex
