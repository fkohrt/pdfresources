% \iffalse meta-comment
%
%% File: pdfresources.dtx
%
% Copyright (C) 2019-2020 The LaTeX3 Project
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
% This file is part of the "pdfresources bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/latex3/pdfresources
%
% for those people who are interested.
%
%<*driver>
\documentclass{l3doc}
\usepackage{tabularx,array,booktabs}
\newcommand\potentialclash{\noindent\llap{\dbend\ }}
\raggedbottom
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
%    \begin{macrocode}
%<@@=pdf>
%<*package>
\ProvidesExplPackage {pdfresources} {2020-07-13} {0.7}
  {experimental pdf-resource management}
%\RequirePackage{zref-base}
\RequirePackage{bitset}
\DeclareOption { debug }
  {
    \msg_redirect_module:nnn { pdf } { none } { warning }
  }
\DeclareOption { patches }{\AtEndOfPackage{\RequirePackage{pdfresources-patches}}}
\ProcessOptions\relax
%</package>
%    \end{macrocode}
%
% \title{\pkg{pdfresources}}
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released 2020-XX-XX}
%
% \maketitle
% \begin{documentation}
% \section{Introduction}
% The \LaTeX{} format currently contains nearly no code specific to the now quite
% central output format, PDF.
% It delegates important tasks like supporting PDF standards,
% creating links, adding special colors, managing the content of
% central PDF-directories to external packages.
% This is problematic as it can lead easily to clashes if two packages try
% to access the same resource in an incompatible way.  Also as
% the primitives differ between the various binaries and backends with
% which \LaTeX{} is used all packages have to write and maintain \enquote{driver} files
% for the various backends.
%
%
% The project here tries to resolve this situation by providing interfaces to
% the various resources and objects in a backend independent way.
%
% The supported backends are pdflatex, lualatex, (x)dvipdfmx (latex, xelatex)
% and dvips with ps2pdf (not completely yet). dvips with distiller could work too
% but is untested.
%
% That the interfaces are backend independent doesn't mean that the results and even
% the compilation behavior is identical. The backends are too different to allow
% this. Some backends expand arguments e.g. in a \cs{special} while other don't.
% Some backends can insert a resource at the first compilation, while another uses
% the aux-file and a label and so needs at least two.
%
% \section{Use}
% The package should be loaded before \cs{documentclass}. To activate
% the resource management it should be followed by
% \cs{DeclareDocumentMetadata}\marg{key-val}. The allowed keys are currently
% described in \pdf{l3pdfinit}
%
% \section{Requirements}
% pdfresources requires a LaTeX format from 2020/10/01 or later.
% It currently depends on the external packages \pkg{zref-base} and \pkg{bitset}.
% In some places, e.g. when writing strings to the pdf it assumes that
% the file is utf8 encoded -- ascii will naturally work too, but 8bit encodings are
% not supported
%
% \section{Incompabilities}
%
% The package tries to take over the management of core PDF dictionaries. All packages
% that bypass this package and access this dictionaries with primitives like
% \cs{pdfcatalog}, \cs{pdfinfo}, \cs{pdfpageresources}, \cs{pdfpagesattr}
% and \cs{pdfpageattr} or similar commands from other engines and backends are
% basically incompatible: values can get lost or be wrong.
%
% The following describes known incompatible packages along with some suggestions
% how this should or will be handled in future. The list is not exhaustive.
%
% \subsection{hyperref}
% A generic driver that can
% be used as replacement has been developed. It can be loaded with
% \begin{verbatim}
%  \usepackage[customdriver=hgeneric-experimental]{hyperref}
% \end{verbatim}
% The code for bookmarks has been removed from this driver, instead
% the \pkg{bookmarks} package should be loaded after \pkg{hyperref}.
% The new driver supports already most of the functions of the original drivers.
% Incomplete is the support for form fields.
%
% \subsection{pdfx}
% \pkg{pdfx} is not compatible. Replacement code to setup standards is under
% development. At first pdf/A will be handled, pdf/X then later.
%
% \subsection{hyperxmp}
% With small adjustments hyperxmp can be used. But the coordination must be
% improved.
%
% \subsection{tikz/pgf}
% \pkg{pgf} writes to the page resources too and so is incompatible. The needed
% changes are rather small and will be done in coordination with the maintainer.
% Until this works, \pkg{pageresources} can be loaded with the option \texttt{patches}
% which will add the needed patches.
%
% \subsection{transparent}
% The package \pkg{transparent} is incompatible. A replacement has been written
% (\pkg{new-transparent}) and will be merged into the package.
%
% \subsection{pdflscape}
% The package \pkg{pdflscape} is incompatible. A replacement has been written
% (\pkg{new-pdflscape}) and will be merged into the package.
%
% \subsection{colorspace}
% The package is incompatible. It works more or less with the option \texttt{patches}.
% Alternative code for spot colors is under development
% in the \pkg{l3color} package.
%
% \subsection{embedfile}
% Tools needed to be able to write a replacement
% to replace this package have been developed in the l3pdffile package.
%
% \subsection{tagpdf}
% The development code is compatible and will be uploaded in time.
%
%
% \end{documentation}
% \begin{implementation}
% \section{messages}
%    \begin{macrocode}
%<*package>
\msg_new:nnn  { pdf } { patches }
              { loading~patch~code }
\msg_new:nnn  { pdf } { pgf-too-late }
              { pgf~is~already~loaded.~Patching~not~possible.}

%</package>
%    \end{macrocode}
% \section{Loading the core files.}
% This loads the core files. The backend should not be loaded
% to allow to set it in the document.
%    \begin{macrocode}
%<*package>
\RequirePackage{l3pdfinit} %
\RequirePackage{l3pdfmeta} %
\RequirePackage{l3pdfdict}
\RequirePackage{l3pdftools}
\RequirePackage{l3pdfmanagement}
%</package>
%    \end{macrocode}
%
% \section{The core dictionaries}
% \subsection{The \enquote{Info} dictionary (pdfinfo)}
% The content of the property list associated with this dictionary name is written to the
% /Info object. This replaces \cs{pdfinfo}.
% \begin{NOTE}{UF}
% path: Info
% The info dictionary is filled by e.g. \cs{pdfinfo}. Multiple appearances of
% \cs{pdfinfo} are concatenated, so one could end with multiple /Title or /Author entries.
% It is then viewer dependent which one is showed, so it is better to avoid this.
% We therefore setup a property which is filled and written to the info
% directory in one go. According to hyperref a few odd drivers (hvtex, dvipsone, dviwind)
% don't support arbitrary keys, but this should be handle elsewhere. Most entries are
% strings so there is a special command for this. As entries with empty content
% should be omitted we add a test. The string command should perhaps escape the argument,
% but for now we are assuming that the argument is pdf safe.
% hyperref writes to the info dictionary at the shipout of the first page --
% probably to catch the  case that \cs{title} is issued after the begin of the document.
% We are outputting at the last page -- this needs a second compilation but
% this is needed anyway.
% \end{NOTE}
%
% \subsubsection{\enquote{Info}/backend}
% The backend code is already in \pkg{expl3}.
% \cs{@@_backend_info_gput:nn} inserts one name/value pair.
%
% \subsubsection{\enquote{Info}/management}
% moved to \pkg{l3pdfmanagement}
%
% \subsection{The \enquote{Pages} dictionary (pdfpagesattr)}
% The content of the property list associated with this dictionary name is written to the
% /Pages object. This replaces \cs{pdfpagesattr}.
% \subsubsection{\enquote{Pages} / backend}
% \begin{NOTE}{UF}
%  path: Pages
%  pdfpagesattr is a single token register which is used at the end of the compilation.
%  dvips syntax: \verb+\special{ps: [/ABC /CDE /EFG /FGH /Rotate 90 /PAGES pdfmark}+
%  dvipdfmx syntax: \verb+\special{pdf:put @pages <</ABC /WEZ /EFG /XYZ /Rotate 0>>}+
%  both remove duplicate entries automatically, so there is no need to be careful.
% \end{NOTE}
% The code is in the extra backend code in \pkg{l3backend-pdf-extra}.
% \subsubsection{\enquote{Pages} / management}
% \begin{NOTE}{UF}
% The register is normally used only a few times in a document, so it would be
% okay to update the register/add the special at every change,
% but with dvips/dvipdfmx this would disable removing entries.
% So we issue the push code only at the end of the document.
% \end{NOTE}
% The code has been moved to \pkg{l3pdfmanagement}
%
% \subsection{\enquote{Page} and \enquote{ThisPage} (pdfpageattr)}
% The content of the property lists associated with this dictionary name is written to the
% /Page objects. This replaces \cs{pdfpageattr}.
% \subsubsection{\enquote{Page} and \enquote{ThisPage} /backend}
% The code has been moved to \pgk{l3backend-pdf-extra}.
% \subsubsection{\enquote{Page} and \enquote{ThisPage} / management}
% \begin{NOTE}{UF}
% Open is the question if one need a command to set attribute on a page by page number.
% Open is the setter for /AF (and perhaps /OutputIntents).
% See also https://tex.stackexchange.com/questions/479812/extension-of-rotating-package-to-set-pdf-rotation
% (should work now)
% \end{NOTE}
% The code has been moved to \pkg{l3pdfmanagement}.
%
% \subsection{\enquote{Page/Resources}: ExtGState, ColorSpace, Shading, Pattern }
% \begin{NOTE}{UF}
% Only for pdf/luatex and xdvipdfmx backend- and pdf-code is needed to add values
% to these resources.
% With dvips the resources are added through high-level code (e.g. transparency), so the
% backend/pdf commands are no-ops.
% For every resources there is only one object. References to these objects are added to
% all pages starting from the page where the first time something has been added to the
% resource and to all XObjects. For luatex and pdftex it must be done together
% with the /Properties, see above.
% I don't see a need to set e.g. /ColorSpace page wise: preflight handles this
% fine, see experiment colorspace-resources.
% As pgf does the same, there is a need to patch it for now. Ditto for package colorspace.
% \end{NOTE}
% \subsubsection{\enquote{Page/Resources}: ExtGState, ColorSpace, Shading, Pattern / backend}
% The code has been moved to \pkg{l3backend-pdf-extra}.
%
% \subsection{\enquote{Catalog} \& subdirectories (pdfcatalog) }
% \subsubsection{\enquote{Catalog} \& subdirectories / backend}
% The backend command is already in the driver:
% \cs{@@_backend_catalog_gput:nn}.
%
% \subsubsection{\enquote{Catalog} \& subdirectories / management }
% \begin{NOTE}{UF}
% The catalog dictionary is filled by e.g. \cs{pdfcatalog}. Multiple appearances of
% \cs{pdfcatalog} are concatenated, so one could end with multiple entries
% for the same value with luatex and pdftex -- the other backends normally
% avoid this problem.
% We therefore setup a property which is filled and executed at a sensible
% (not fixed) place.
% /AF is even an array of dictionaries.
% There is probably no way to test what has already been added to the catalog,
% so doublets can only be avoided with ``don't do it''.
% see catalogue.tex for a list of entries ...
% Perhaps some tools to create the AF-file specification dictionaries is useful.
% Open for now:
% /Extensions               (dict, pdf 2.0)
% /Dests ? difference to subdict in Names?
% /DSS                      (dict, pdf 2.0)
% /Acroform/DR/ExtGState etc probably unneeded.
% \end{NOTE}
%
%  The code has been moved to \pkg{l3pdfmanagement}.
%
% \subsection{Local dictionaries}
%
% All dictionaries described above were global dictionaries and basically they
% are written at most once (or at most once per page) to the PDF. The pdfdict module
% predefines also a number of local dictionaries. These are used in objects like
% link annotations (see the pdfannot module) which are written in varying
% numbers to the PDF and allow to set their features and change them locally
% if needed. The predefined dictionaries are
% \begin{NOTE}{UF}
% sync that with the table in pdfdict ...
% \end{NOTE}
% \begin{tabular}{lp{6cm}}
%  \multicolumn{2}{l}{annotation related: here are
%                     \texttt{Border} and \texttt{C} (color)}\\
%  annot/Link/Goto   & used in GoTo links (internal references) \\
%  annot/Link/URI    & used in URI links (external uri references) \\
%  annot/Link/GotoR  & used in GoToR links (file  references) \\
%  annot/Link/Named  & used in Named actions (menu calls) \\
%  annot/Link/Launch & used in Launch links (application calls) \\
% \end{tabular}
%
% \section{Various PDF contents}
% The following commands allow to create a number of important pdf objects and contents in a
% backend independant way.
% moved to l3pdfutils.
%
% \section{Document metadata}
% The code has been moved to \pkg{l3pdfmeta}.
%
% \section{Patches}
% The code has been moved to pageresources-patches.dtx
% \end{implementation}
% \newpage
% \PrintIndex
