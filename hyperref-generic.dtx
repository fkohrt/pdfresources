% \iffalse meta-comment
%
%% File: hyperref-generic.dtx
%
% Copyright (C) 2020 The LaTeX3 Project
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    http://www.latex-project.org/lppl.txt
%
% This file is part of the "pdfresources bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% The released version of this bundle is available from CTAN.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/latex3/pdfresources
%
% for those people who are interested.
%
%<*driver>
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
% \title{^^A
%   The \pkg{hyperref-generic} package  \\ A generic driver for hyperref ^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released XXXX-XX-XX}
%
% \maketitle
% This package generates a generic driver for \pkg{hyperref} meant to be used
% with the new LaTeX PDF management code. Currently---until \pkg{hyperref} has been
% adapted to use this driver it has to be loaded with
% \begin{verbatim}
% \usepackage[customdriver=hgeneric-experimental]{hyperref}
% \end{verbatim}
% Both the name of the driver and the loading method will change.
%
% The generic driver can be used with pdflatex, lualatex, xelatex, latex with
% dvipdfmx, latex with dvips+ps2pdf. latex with dvips+distiller could work too
% but is untested.
%
% The driver requires the new PDF management code, so document wanting to use it should
% start like this
% \begin{verbatim}
% \RequirePackage{pdfmanagement} %loads the code
% \DeclareDocumentMetadata % activates it
%   {
%    % options
%    % e.g. pdf version, backend:
%    % pdfversion=1.7,
%    % backend = dvipdfmx
%   }
%  \end{verbatim}
%
%  \section{Differences}
%  The new driver tries to be compatible with the current \pkg{hyperref} drivers
%  but there are nevertheless differences. Some of them due to the still experimental
%  status of the driver, others are design decision: one part of the project is
%  to clean up and modernize the code.
%
%  \subsection{Bookmark code}
%  The driver doesn't contain code to handle bookmarks/outlines. Instead it forces
%  the loading of the \pkg{bookmark} package. Currently this is done at the end of the preamble
%  so if commands from \pkg{bookmark} are needed in the preamble the document
%  still has to load it manually but this is subject to change.
%
%  \subsection{PDF strings}
%
%  \pkg{hyperref} use a command called \cs{pdfstringdef} to convert text input into
%  something that both makes sense and is valid in a PDF string, e.g. in the bookmarks
%  or in the info dictionary or as form field values.
%
%  As the handling of the outlines are delegated to the \pkg{bookmark} package, they
%  will for now still use \cs{pdfstringdef}, but all other strings produced by
%  this driver will use a new method based on \cs{text_purify:n} and
%  \cs{str_set_convert:Nnnn}. For normal text
%  it shouldn't matter, but a variety of commands and math are handled differently.
%  Like with \cs{pdfstringdef} they are a number of ways to adjust the outcome of
% \cs{text_purify:n}. These are described in the expl3 documentation interface3.pdf.
%
%  Important differences here are
%  \begin{itemize}
%     \item \emph{This new method requires that files are utf8-encoded}
%      (at least if non-ascii chars are used in for PDF strings).
%     \item \emph{All} robust commands are removed, unless an equivalent has been
%     declared.
%     \item Currently the new method is much more silent: it doesn't warn like
%     \pkg{hyperref} if it removes commands.
%   \end{itemize}
%  \subsection{Package options from hyperref}
%  Only a few package options are recognized by the new driver currently
%  as \pkg{hyperref} hasn't been adapted yet.
%
%  Such options should be set with \cs{hypersetup} after
%  the package has been loaded. This can also be the case for options which normally
%  don't work in \cs{hypersetup}.
%
%  Options that still must be set as package options are
%  |pdfpagelabels| (a boolean)
%
%  \subsection{Draftmode}
%  pdftex and other engines knows a
%  draftmode and hyperref honors this in some places. The new
%  driver ignores this, for example |pagelabels| are always created.
%
%  \subsection{Dropped options}
%  A number of options are ignored by this driver
%  \begin{description}
%  \item[pdfversion] The pdfversion should be set in \cs{DeclareDocumentMetadata}
%  \item[breaklinks] The option does nothing sensible anyway (apart from triggering
%  a warning). Currently with latex+dvips links can not be broken. But there is work
%  in progress to change this.
%  \item[unicode] This is always true.
%  \item[pdfa] If this option is set to true \pkg{hyperref} normally checks and sets
%  a small number of requirements for the PDF standard PDF/A.
%  The key is ignored with this driver. Instead the wanted standard should be declared
%  in \cs{DeclareDocumentMetadata}:
%  \begin{verbatim}
%  \DeclareDocumentMetadata{standard=A-2b}
%  \end{verbatim}
%  Currently |A-1b|, |A-2b|, |A-3b| can be set.
%  The support for various requirements is still incomplete, but the parts that
%  \pkg{hyperref} already checked are implemented:
%  \begin{itemize}
%  \item The |/F| key is added to links and Print is activated, Hidden, Invisible,
%   NoView are deactivated.
%  \item |/NeedAppearances| is suppressed
%  \item  Pushbuttons, which use the action |/S/JavaScript| are suppressed
%  \item  Resetbuttons, which use the action |/S/ResetForm| are suppressed Resetbutton
%  \item  In widget annotations, the /AA dictionary is suppressed.
%  \end{itemize}
%  \end{description}
%  \subsection{Destinations}
%  Destinations (sometimes call anchors in the \pkg{hyperref} documentation)
%  are the places a link jumped too. Unlike the name may suggest they don't described
%  an exact location in the PDF. Instead a destination contains a reference to
%  a page along with an instruction how to display this page.
%  The normally used \enquote{XYZ \textit{top left zoom}} for example instructs
%  the viewer to show the page with the given \textit{zoom} and
%  the top left corner at the \textit{top left} coordinates---which then gives
%  the impression that there is an anchor at this position.
%
%  From these instructions two |Fit| and |FitB| are absolute. All
%  others take one (|FitH|, |FitV|, |FitBH|, |FitBV|)
%  or more (|XYZ|, |FitR|) arguments. These arguments are normally
%  coordinates, |XYZ| takes also a zoom factor. The coordinates are
%  absolute coordinates in bp relative to the lower left corner
%  of the PDF.
%
%  With pdftex almost all instructions
%  don't take an argument: The needed coordinate is instead calculated from the location
%  the \cs{pdfdest} command is issued. So to get a specific coordinate one has to
%  move the command to the right place. E.g.
%  \begin{verbatim}
%  \AddToHookNext{shipout/background}
%     {\put(0,-\pdfpageheight+100bp){\pdfdest name{destA} FitH\relax}}
%  \end{verbatim}
%
%  Exceptions are the |XYZ| instruction, where pdftex accepts a keyword
%  |zoom| followed by a zoom factor, and the |FitR| instruction
%  which understands the keywords |width|, |height| and |depth|
%  followed by a dimension, which is then used to calculate a rectangle relative to the
%  current location. If no keywords are given the dimensions are taken from the surrounding
%  box---which can also lead to zero sized areas.
%
%  The manual of \pkg{hyperref} gives a bit the impression as if this
%  coordinates can be set manually by the user but as described above this is
%  mostly wrong: It is for normal destination only possible with a dvi-backend like
%  dvips which make use of pdfmark.def. pdftex and luatex can use manual coordinates
%  only for |pdfstartview| and |pdfremotestartview|
%  As dvips was the first driver of \pkg{hyperref} the option |pdfview| was at first
%  developed for it and then adapted to pdftex. But this had the effect that the handling
%  of the option |pdfview| is inconsequent across the backend and engines:
%  For example with |pdfview=FitH 100| pdftex ignores the
%  number and calculates on its own, while dvips sets the coordinate to the absolute
%  100. The zoom factor of XYZ is not supported by the pdftex driver at all, and
%  |FitR| only partially.
%
%  The generic driver consolidate this but tries to stay compatible with the other
%  drivers as far as possible.
%  It also takes into account the |pdfview| and |pdfstartview| and |pdfremotestartview|
%  have different requirements: While for the first relative coordinates are fine,
%  for the two others absolute coordinates are more sensible.
%
%  So with this driver the options
%  |pdfview|, |pdfstartview| and |pdfremotestartview| take
%  the following options:
%  \begin{itemize}
%  \item |Fit|, |FitB|, |FitH|, |FitV|,
%   |FitBH|, |FitBV| which can be followed by a positive integer (separated by a space) or the
%   keyword |null|.
%   The number can be gives as a \meta{dimension expression} surrounded with
%   \cs{hypercalcbp}. The driver redefines this command to use
%   \cs{dim_to_decimal_in_bp:n}.
%   \begin{itemize}
%   \item |pdfview| will ignore the integer and any other arguments and calculate
%   the expected coordinates as described above for pdftex with all
%   supported engines and backends.
%   \item |pdfstartview| and |pdfremotestartview| will pass the optional
%   number or keyword after expansion as absolute coordinate. If needed they will
%   extend them with |null|
%   \end{itemize}
%
%  \item |XYZ|. This can be followed (separated by spaces) by up to three
%  positive integers or keywords |null| which are then taken as \textit{top left zoom}
%  in this order. \textit{zoom} is a factor, so e.g. 0.5 will give a scaling of 50\%.
%   \begin{itemize}
%   \item |pdfview| will use the last value as \textit{zoom}, ignore all other values
%   and calculate  the expected coordinates as described above for pdftex with all
%   supported engines and backends (this means it is possible to use |XYZ 2| to
%   set a zoom of 200\%, it is not necessary to fill in dummy values.)
%   \item |pdfstartview| and |pdfremotestartview| will pass the optional
%   numbers or keyword after expansion as absolute coordinates and zoom.
%   If needed they will extend them with |null|.
%   \end{itemize}
%   This new behaviour is in part incompatible with previous handling with the dvips driver.
%
%
%  \item |FitR|.
%  If no argument (separated by spaces) follows then
%  |pdfview| will use with pdftex and luatex
%  the automatic calculation of the coordinates from the encompassing box. With
%  dvips and (x)dvipdfmx  it will fall back to |Fit|.
%  |pdfstartview| and |pdfremotestartview| will fallback to |Fit| too.
%
%  If arguments (separated by spaces) follow they should be
%  four numbers  representing \texttt{left bottom right top}.
%  \begin{itemize}\item
%  |pdfview| will use the values to calculate coordinates relative to the current
%  location. So |0 -100 200 400| will give a \enquote{box} of width 200bp,
%  height 400bp and depth 100dp that the destination should encompass.
%  Missing numbers will be set to 0. But one should be aware that is it is quite
%  unpredicable how viewers which support |FitR| handles zero sizes.
%
%  \item |pdfstartview| and |pdfremotestartview| will pass
%  the values as absolute coordinates.
%  \end{itemize}
%  \end{itemize}
%
%

%^^A %% This is an adapted version of hluatex.def
%^^A %% meant to test the use of the commands
%^^A %% from pdfmanagement.sty
%^^A %%
%^^A %% drivers are loaded in line 4745 in hyperref.sty in a \Hy@AtEndOfPackage command.
%^^A %%%%%%%%%%%%%%%%%%%%%%%%%%%%
%^^A %% list of new internal commands
%^^A %% __hyp_link_dest_begin:nw : start command for links to internal destination
%^^A %%                             replaces \find@pdflink
%^^A %% __hyp_link_dest_end:
%^^A %% __hyp_destination:n     :  sets an anchor, replaces \new@pdflink
%^^A %% \__hyp_PageLabels_gpush: : puts pagelabels in the catalog, used on every storing
%^^A %% PDF String (text)
%^^A %% *\@@_text_pdfstring:nnN  : replaces Hy@pstringdef, converts #1 to pdfstring in encoding #2
%^^A %%                           and stores in N
%^^A %% Build with:
%^^A %% *\@@_text_purify:nN
%^^A %% *\@@_text_cleanup:N
%^^A %% *\@@_text_convert:nN
%^^A %%
%^^A %% Destinations (dest)
%^^A %% \l_@@_dest_box
%^^A %%
%^^A %% References (ref)
%^^A %% *\@@_ref_label:nn
%^^A %% *\@@_ref_if_exist:nn
%^^A %% *\@@_ref_check:nn
%^^A %% % helps to display key list messages
%^^A %% \@@_clist_display:n
%^^A %%
%^^A %% \__hyp_info_generate_addons: what did this do??
%^^A %%
%^^A %% \g__hyp_AcroForm_CoFields_prop
%^^A %% \g__hyp_AcroForm_Fields_prop
%^^A %%
%^^A %%  \g_@@_dest_pdfstartpage_tl ,
%^^A %%  \g_@@_dest_pdfstartview_tl ,
%^^A %%  \l_@@_dest_pdfremotestartview_tl ,
%^^A
%^^A %% Constants
%^^A %% *\c_@@_map_linktypes_prop
%^^A %% *\c_@@_dest_undefined_tl
%^^A %% Temp variables
%^^A %% \l_@@_tmpa_seq
%^^A %% \l_@@_tmpa_box
%^^A %% \l_@@_tmpa_tl
%^^A %% \l_@@_tmpa_str
%^^A %% \l_@@_tmpa_int
%^^A %%
%^^A %% \l_@@_dest_name_tmpa_tl
%^^A %% \l_@@_uri_tmpa_tl
%^^A %% \l_@@_filename_tmpa_tl
%^^A %% \l_@@_para_tmpa_tl
%^^A %% \l_@@_text_tmpa_str
%^^A %% \g_@@_text_tmpa_str
%^^A %% \l_@@_CheckmarkYes_tl
%^^A %% \l_@@_CheckmarkOff_tl
%^^A %% \l_@@_RadioYes_tl
%^^A
%^^A %% \l_@@_dest_pdfview_tl
%^^A %% list of commands which probably will have to change
%^^A %%   \Hy@EXPsetpdfborder
%^^A %%   \Hy@EXPsetpdfhighlight
%^^A %%   \Hy@EXPsetbordercolor
%^^A % %   \hypupdateattribute

%    \begin{macrocode}
%<*package>
%<@@=hyp>
%    \end{macrocode}
%    \begin{macrocode}
\ProvidesFile{hgeneric-experimental.def}
  [2020/12/26 v0.71 %
  Hyperref driver for luaTeX]

\RequirePackage{etoolbox} %why?
\RequirePackage{l3color}
%    \end{macrocode}
%
% \section{Overwriting/providing commands from hyperref}
%  hyperref checks driver version, we need to suppress this during the development
%    \begin{macrocode}
\chardef\Hy@VersionChecked=1 %don't check the version!
\ExplSyntaxOn
%    \end{macrocode}
%
% We define a better (expandable) version of \cs{hypercalcbp}
%    \begin{macrocode}
\cs_set_eq:NN \hypercalcbp \dim_to_decimal_in_bp:n
%    \end{macrocode}
%
% This is used as default file extension, should probably go into hyperref.
%    \begin{macrocode}
\providecommand*{\XR@ext}{pdf} %
%    \end{macrocode}
%
% This command must be provided for now, but they are unused by the driver:
%    \begin{macrocode}
\tl_new:N\@pdfborder
\tl_new:N\@pdfborderstyle
%    \end{macrocode}
%
% We force unicode as option. As bookmarks are still using \cs{pdfstringdef}
% we also need to load puenc.def.
%    \begin{macrocode}
\HyPsd@LoadUnicode
\Hy@unicodetrue
\let\HyPsd@pdfencoding\HyPsd@pdfencoding@unicode
\Hy@DisableOption{unicode}
%    \end{macrocode}
%
% \section{messages}
%  Redirect the message name:
%    \begin{macrocode}
\prop_gput:Nnn \g_msg_module_name_prop { hyp }{ hyperref }
%    \end{macrocode}
% At first a message for the testing of the resource management
%    \begin{macrocode}
\msg_new:nnnn
  { hyp }
  { missing-resource-management }
  { The~PDF~resource~management~is~required~for~this~hyperref~driver! }
  {
     Activate~it~with \\
     \tl_to_str:n{\RequirePackage{pdfmanagement}}\\
     \tl_to_str:n{\DeclareDocumentMetadata{<options>}}\\
     before~\tl_to_str:n{\documentclass}
  }
%    \end{macrocode}
% The pdfversion should be set in \cs{DeclareDocumentMetadata}
%    \begin{macrocode}
\msg_new:nnnn
  { hyp }
  { pdfversion-disabled }
  {
    This~hyperref~driver~ignores~the~pdfversion~key!\\
    Set~the~pdfversion~in~\token_to_str:N \DeclareDocumentMetadata
  }
  {
    For example:\\
    \tl_to_str:n
     {
      \DeclareDocumentMetadata { pdfversion=1.7 }
     }
  }
%    \end{macrocode}
% pdf/A messages for fields, this will probably be moved to an external package
%    \begin{macrocode}
\msg_new:nnn
  { hyp }
  { pdfa-no-push-button }
  { PDF/A:~Push~button~with~JavaScript~is~prohibited }

\msg_new:nnn
  { hyp }
  { pdfa-no-reset-button }
  { PDF/A:~Reset~action~is~prohibited }
%    \end{macrocode}
% A message if the destination name is empty.
%    \begin{macrocode}
\msg_new:nnn
  { hyp }
  { empty-destination-name }
  {
    Empty~destination~name,\\
            using~`#1'
  }
%    \end{macrocode}
% A message if the destination check fails
%    \begin{macrocode}
\msg_new:nnn
  { hyp }
  { invalid-destination-value }
  {
    Invalid~value~`#1'~of~`#2'  \\
    is~replaced~by~`Fit'~\msg_line_context:.
  }
%    \end{macrocode}
% Some options or values should not be used in older pdf versions
%    \begin{macrocode}
\msg_new:nnn
  { hyp }
  { ignore-deprecated-or-unknown-option-in-pdf-version }
  {
    Option~`#1'~is~unknown~or~deprecated~in\\
    pdf~version~#2.~Ignored.
  }
\msg_new:nnn
  { hyp }
  { ignore-deprecated-or-unknown-value-in-pdf-version }
  {
    Value~`#1'~is~unknown~or~deprecated~in\\
    pdf~version~#2.~Ignored.
  }
\msg_new:nnn
  { hyp }
  { replace-deprecated-or-unknown-value-in-pdf-version }
  {
    Value~`#1'~is~unknown~or~deprecated~in\\
    pdf~version~#2. Value~`#3'~is used instead.
  }
%    \end{macrocode}
% During development not all standard hyperref keys are known, this issues a warning
% for now:
%    \begin{macrocode}
\msg_new:nnn
  { hyp }
  { unknown-key }
  {
    unknown~key~#2~of~module~’#1’~set~to~’#3’.
  }
%    \end{macrocode}
% There are a lot choice keys. This defines messages which shows the valid
% choices if a faulty one has been used:
%    \begin{macrocode}
\cs_new:Npn \@@_clist_display:n #1 {*~#1\\}
\msg_new:nnn
  { hyp }
  { unknown-choice }
  {
    Value~'#3'~is~invalid~for~key~'#1'.\\
    The~key~accepts~only~the~choices\\
    \clist_map_function:nN { #2 }\@@_clist_display:n
  }

\msg_new:nnn
  { hyp }
  { unknown-choice+empty }
  {
    Value~'#3'~is~invalid~for~key~'#1'.\\
    The~key~accepts~only~the~choices\\
    \clist_map_function:nN { #2 }\@@_clist_display:n
    An~empty~value~removes~the~setting.
  }

\msg_new:nnn
  { hyp }
  { no-bool }
  {
    Value~'#2'~is~invalid~for~key~'#1'.\\
    The~key~accepts~only~the~choices\\
    *~true\\
    *~false \\
    *~and~an~empty~value~which~removes~the~setting.\\
    No~value~is~equivalent~to~using~`true`.
  }
%    \end{macrocode}
% \section{Checks}
% The driver can not work properly if the pdfmanagement is not active,
% as keys need to write to the catalog and to info. But annotations
% and outlines should work.
% So should this be a fatal error?
% Should there be a difference between missing and inactive management?
% TODO
%    \begin{macrocode}
\bool_lazy_and:nnF
  { \cs_if_exist_p:N \pdfmanagement_if_active_p: }{ \pdfmanagement_if_active_p: }
  { \msg_error:nn { hyp}{ missing-resource-management } }
%    \end{macrocode}
% Outlines/bookmarks require the bookmark package.
%    \begin{macrocode}
\AddToHook{begindocument/before}{\RequirePackage{bookmark}}
%    \end{macrocode}
%
% \section{Reference and label commands}
% The code uses the l3ref-tmp package which
% must have been loaded as pdfmanagement is a requirement.
% The commands use after the module prefix always |_ref|.
%
% At first a label command which add the space commands from LaTeX:
%    \begin{macrocode}
%
\cs_new_protected:Npn \@@_ref_label:nn #1 #2 %label/attributes
  {
    \@bsphack
      \ref_label:nn{#1}{#2}
    \@esphack
  }
\cs_generate_variant:Nn \@@_ref_label:nn {en}
%    \end{macrocode}
% This provides a condition which tests if a label/attribute combination is known
%   \begin{macrocode}
\prg_new_eq_conditional:NNn \@@_ref_if_exist:nn \ref_if_exist:nn { p , T , F,  TF }
\prg_generate_conditional_variant:Nnn \@@_ref_if_exist:nn  {en}  { p , T , F, TF }
%    \end{macrocode}
% This checks if the label/attribute is known and issues a warning if not.
% It then also triggers the standard rerun message.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_ref_check:nn #1 #2 %label/attribute
  {
    \@@_ref_if_exist:nnF {#1}{#2}
      {
        \protect\G@refundefinedtrue
        \@latex@warning
          {
            Reference~`\tl_to_str:n {#1}'~with~attribute~`\tl_to_str:n {#2}'~
            on~page~\thepage~\space undefined
          }
      }
  }
\cs_generate_variant:Nn \@@_ref_check:nn {en}
%    \end{macrocode}
% This retrieves a value, it is a simple wrapper around the \cs{ref_value:nn}
%    \begin{macrocode}
\cs_new:Npn \@@_ref_value:nn #1 #2
  {
    \ref_value:nn{#1}{#2}
  }
\cs_generate_variant:Nn \@@_ref_value:nn {en}
%    \end{macrocode}
%
% \section{Variables}
% \subsection{Private temporary variables}
% At first a few generic tmp variables
% \begin{variable}
%  {
%    \l_@@_tmpa_tl,
%    \l_@@_tmpa_seq,
%    \l_@@_tmpa_int,
%    \l_@@_tmpa_box,
%    \l_@@_tmpa_str,
%  }
%    \begin{macrocode}
\box_new:N \l_@@_tmpa_box
\tl_new:N  \l_@@_tmpa_tl
\seq_new:N \l_@@_tmpa_seq
\int_new:N \l_@@_tmpa_int
\str_new:N \l_@@_tmpa_str
%    \end{macrocode}
% \end{variable}
%
% A number of more specific tmp variables. These will perhaps disappear or change.
% \begin{variable}
%  {
%   \l_@@_dest_name_tmpa_tl,
%   \l_@@_uri_tmpa_tl,
%   \l_@@_filename_tmpa_tl,
%   \l_@@_para_tmpa_tl
%   \l_@@_text_tmpa_str
%   \g_@@_text_tmpa_str
%  }
% TODO: document and check use!
%    \begin{macrocode}
\tl_new:N  \l_@@_dest_name_tmpa_tl
\tl_new:N  \l_@@_uri_tmpa_tl
\tl_new:N  \l_@@_filename_tmpa_tl
\tl_new:N  \l_@@_para_tmpa_tl
\str_new:N \l_@@_text_tmpa_str
\str_new:N \g_@@_text_tmpa_str
%    \end{macrocode}
% \end{variable}
%
% \subsection{Constants}
% \begin{variable}
%   { \c_@@_dest_undefined_tl }
%  This variable is used if a destination name is empty.
%    \begin{macrocode}
\tl_const:Nn \c_@@_dest_undefined_tl {UNDEFINED}
%    \end{macrocode}
% \end{variable}
% \begin{variable}
%   { \c_@@_map_linktypes_prop }
%  This constants holds the link types managed by hyperref
%  along with a mapping from annot names to hyperref names.
%    \begin{macrocode}
\prop_const_from_keyval:Nn \c_@@_map_linktypes_prop
  {
    URI   = url,
    GoTo  = link,
    GoToR = file,
    Named = menu,
    Launch= run
  }
%    \end{macrocode}
% \end{variable}
% \subsection{Variables}
% \begin{variable}
%   {
%     \g_@@_dest_pdfstartpage_tl ,
%     \g_@@_dest_pdfstartview_tl ,
%     \l_@@_dest_pdfremotestartview_tl ,
%   }
%   The first holds the (absolute) start page number,
%   the other the startview instruction for the current and remote files.
%   The instruction is in \enquote{PDF format} but without the leading slash!
%    \begin{macrocode}
\tl_new:N  \g_@@_dest_pdfstartpage_tl
\tl_new:N  \g_@@_dest_pdfstartview_tl
\tl_new:N  \l_@@_dest_pdfremotestartview_tl
%    \end{macrocode}
% \end{variable}
%
% It is still unclear which str convert option is the best in the various
% places, so we use a variable to allow tests and perhaps external configuration.
% \begin{variable}
%   {
%     \l_@@_text_enc_uri_print_tl,
%     \l_@@_text_enc_info_print_tl,
%     \l_@@_text_enc_dest_tl,
%     \l_@@_text_enc_dest_print_tl,
%     \l_@@_text_enc_file_print_tl,
%     \l_@@_text_enc_para_print_tl
%   }
%    \begin{macrocode}
\tl_new:N  \l_@@_text_enc_uri_print_tl
\tl_new:N  \l_@@_text_enc_info_print_tl
\tl_new:N  \l_@@_text_enc_dest_tl
\tl_new:N  \l_@@_text_enc_dest_print_tl
\tl_new:N  \l_@@_text_enc_file_print_tl
\tl_new:N  \l_@@_text_enc_para_print_tl

\tl_set:Nn \l_@@_text_enc_uri_print_tl  {string-dest-print}
\tl_set:Nn \l_@@_text_enc_info_print_tl {string-hex-print}
\tl_set:Nn \l_@@_text_enc_dest_tl       {string-dest}
\tl_set:Nn \l_@@_text_enc_dest_print_tl {string-dest-print}
\tl_set:Nn \l_@@_text_enc_file_print_tl {string-dest-print}
\tl_set:Nn \l_@@_text_enc_para_print_tl {string-dest-print}
%    \end{macrocode}
% \end{variable}
% \begin{variable}{\l_@@_dest_pdfview_tl}
% This hold the destination instructions in a format suitable for
% \cs{pdf_destination:nn}. The special value |fitrbox| indicates a boxed destination.
%    \begin{macrocode}
\tl_new:N  \l_@@_dest_pdfview_tl
%    \end{macrocode}
% \end{variable}
%
% \subsection{Boxes}
% \begin{variable}{\l_@@_dest_box}
% This holds an (empty) box which is used to get the width for FitR destinations.
%    \begin{macrocode}
\box_new:N  \l_@@_dest_box
%    \end{macrocode}
% \end{variable}

% \subsection{Regex}
% \begin{variable}{\c_@@_dest_startview_regex}
% This regex is used to extract the right arguments
% pdfstartview and pdfremotestartview. Their values is filled up with |null|
% and then the start extracted.
%    \begin{macrocode}
\regex_const:Nn \c_@@_dest_startview_regex
  {
    \A\ *
     (?:
      (?:XYZ (?:\ +(?:(?:\d+|\d*\.\d+)|null)){3}\ )
      |
      (?:Fit\b|FitB\b)
      |
      (?:(?:FitH|FitV|FitBH|FitBV)(?:\ +(?:\d+|\d*\.\d+)|\ +null){1})
      |
      (?:FitR (?:\ +\d+|\ +\d*\.\d+){4}\ )
     )
  }
%    \end{macrocode}
% \end{variable}
%
% \subsection{PDF dictionaries}
% \begin{variable}{l_@@_page/Trans}
% This dictionary is used for page transitions.
%    \begin{macrocode}
\pdfdict_new:n   {l_@@_page/Trans}
\pdfdict_put:nnn {l_@@_page/Trans}{Type}{/Trans}
%    \end{macrocode}
% \end{variable}

% \section{PDF string conversion}
%
% This defines a command which is used to replace
% \cs{pdfstringdef}. This is probably temporary and will be adjusted or
% replaced if some more generic PDF string command/module exists.
% All commands here use the \enquote{submodule} name \texttt{text}.
% At first a hook for user additions:
%    \begin{macrocode}
\hook_new:n {hyp/text/pdfstring}
%    \end{macrocode}
% The first step to convert input in a PDF string is to purify it, that means
% to remove/expand commands. As the whole process is not expandable anyway we
% can use a protected command. The \enquote{output} is a string:
%    \begin{macrocode}
\cs_new_protected:Npn \@@_text_purify:nN #1 #2 %#1 input, #2  str command
  {
     \str_set:Nx #2 {\text_purify:n { #1 } }
  }
%    \end{macrocode}
% The second step is to cleanup the output of the first step. This is a dummy
% currently. The argument should be a string variable.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_text_cleanup:N #1
 {

 }
%    \end{macrocode}
% The last step converts the string to a PDF encoding. As we have at least two
% targets (hex and literal) there is an argument. The conversion assumes
% utf8 input, it is based on cs{pdf_text_convert:nnN} in l3pdftools.
%
% \#2 is str variable,
% \#1 should be
% \begin{tabular}{ll}
%  string-dest-print   & \texttt{(lit)} (utf8 without BE marker)\\
%  string-dest         & \texttt{lit}   (utf8 without BE marker)\\
%  string-hex-print    & \texttt{<HEX>}\\
%  string-hex          & \texttt{HEX}\\
%  string-lit_print    & \texttt{(lit)}\\
%  string-lit          & \texttt{lit}
%  \end{tabular}
%    \begin{macrocode}
\cs_new_protected:Npn \@@_text_convert:nN #1 #2
  {
     \pdf_text_convert:nVN { #1 } #2 #2
  }
%    \end{macrocode}
% This command combines everything.
% |#1|=input, |#2|= handler shortcut |#3|= output str variable
% The commands uses a group to locally set \cs{Hy@pdfstringtrue}
% so that \cs{texorpdfstring} works and other local settings can be done.
%
%    \begin{macrocode}
\cs_new_protected:Npn \@@_text_pdfstring:nnN #1 #2 #3
  {
    \group_begin:
    \Hy@pdfstringtrue
    \hook_use:n {hyp/text/pdfstring}
    \@@_text_purify:nN  { #1 } \l_@@_text_tmpa_str
    \@@_text_cleanup:N         \l_@@_text_tmpa_str
    \@@_text_convert:nN { #2 } \l_@@_text_tmpa_str
    \str_gset_eq:NN \g_@@_text_tmpa_str\l_@@_text_tmpa_str
    \group_end:
    \str_set_eq:NN #3 \g_@@_text_tmpa_str
 }
\cs_generate_variant:Nn \@@_text_pdfstring:nnN {xnN,onN,xoN,ooN,noN}
%    \end{macrocode}
% !!! temporary until all instances are gone
%    \begin{macrocode}
\cs_new_protected:Npn\Hy@pstringdef #1 #2
  { \@@_text_pdfstring:xnN {#2} {string-lit}#1 }
%    \end{macrocode}
% This is a special version for info keys:
%    \begin{macrocode}
\cs_new_protected:Npn \@@_text_pdfstring_info:nN #1 #2
  {
    \@@_text_pdfstring:noN  { #1 }{ \l_@@_text_enc_info_print_tl } #2
  }
%    \end{macrocode}

% \section{Pagelabels}
% Page labels are representations of the page numbers in the PDF viewer. If the hyperref
% options |pdfpagelabels| is true (the default) roman numbers are e.g. shown as
% \enquote{ii (2/58)}. To do this the page ranges must be collected, if possible a prefix
% and the numbering of the counter must be identified and then written
% to the catalog.
%
% The current implemention in hyperref/hyperref drivers:
% \begin{description}
% \item[xetex:] hxetex.def, line 80-110\\
%        |\HyPL@StorePageLabel| writes to the aux-file
%        at begin document (after reading the aux)
%        |\HyPL@SetPageLabels| is called (defined in hyperref.sty after the driver
%        loading)
%        which calls |\Hy@PutCatalog{/PageLabels<</Nums[\HyPL@Labels]>>}|
% \item[dvips:]  identical to xetex, line 60 to 90 in pdfmark.def
% \item[dvipdfm:] identical to xetex
% \item[pdftex:] |\HyPL@StorePageLabel| stores in |\HyPL@Labels| in the first compilation
% In |\AtVeryEndDocument|  |\HyPL@SetPageLabels| is called.
% \item[luatex] identical to pdftex
% \end{description}
%
% The code in \pkg{hyperref} inspects |\thepage| and tries to figure out
% the numbering system and the prefix. E.g. A-\arabic{page} is correctly split.
% If the counter can not be identified \pkg{hyperref} generates only /P entries with the
% whole content.
%
% The new implementation makes use of the pdf management: The relevant entry in the
% catalog is continuously updated and pushed out at the end of the document.
% This works (hopefully \ldots) with all drivers.
%
% We do not try to avoid the (in hyperref's wording)
% \enquote{useless} pagelabel entry
% |/PageLabels <</Nums[0<</S/D>>]>>|
% (but it would be possible), we also don't test for empty |\thepage|,
% \pkg{hyperref} seems to handle this fine and the pdf is valid.
%
% The code has to define |\Hy@PutCatalog| as we can't yet
% change code in hyperref. The switch for draftmode has been removed.
%
%    \begin{macrocode}
\cs_new_protected:Npn\@@_PageLabels_gpush:
  {
    \pdfmanagement_add:nnx {Catalog} {PageLabels}{<</Nums[\HyPL@Labels]>>}
  }

\def\Hy@PutCatalog #1 {}


\legacy_if:nT { Hy@pdfpagelabels }
  {
    \cs_set_protected:Npn \HyPL@StorePageLabel #1
      {
        \tl_gput_right:Nx \HyPL@Labels { \the\Hy@abspage<<#1>> }
        \@@_PageLabels_gpush:
      }
  }
%    \end{macrocode}


%    \begin{macrocode}

% variants of hyperref commands to get attributes in the prop
% these are (temporary) commands to fill various attributes (color, border style) in
% the hooks for links from the hyperref keys.

% pdfborder, pdfborderstyle
%    \begin{macrocode}
\pdfannot_link_margin:n { 1pt }

\cs_new_protected:Npn \Hy@EXPsetpdfborder
  {
    \seq_map_inline:Nn \c_pdfannot_link_types_seq
      {
        \tl_if_empty:NTF \@pdfborder
          {
            \pdfannot_dict_remove:nn {link/##1}{Border}
          }
          {
            \exp_args:Nnnx
             \pdfannot_dict_put:nnn
              {link/##1}
              { Border }
              { [\@pdfborder] }
          }
        \tl_if_empty:NTF \@pdfborderstyle
          {
            \pdfannot_dict_remove:nn {link/##1} { BS }
          }
          {
            \exp_args:Nnnx
             \pdfannot_dict_put:nnn
              {link/##1}
              { BS }
              { <<\@pdfborderstyle>> }
          }
      }
  }

% highlight
\cs_new_protected:Npn \Hy@EXPsetpdfhighlight
  {
    \seq_map_inline:Nn \c_pdfannot_link_types_seq
      {
        \tl_if_empty:NTF \@pdfhighlight
          {
            \pdfannot_dict_remove:nn {link/##1}{ H }
          }
          {
            \exp_args:Nnnx
             \pdfannot_dict_put:nnn
              {link/##1}
              { H }
              { \@pdfhighlight }
         }
     }
  }

% bordercolor
\cs_new_protected:Npn \Hy@EXPsetbordercolor
  {
    \seq_map_inline:Nn \c_pdfannot_link_types_seq
      {
        \tl_if_exist:cTF { @\prop_item:Nn\c__hyp_map_linktypes_prop{##1}bordercolor }
          {
           \exp_args:Nnnx
             \pdfannot_dict_put:nnn
              {link/##1}
              { C }
              { [\tl_use:c {@\prop_item:Nn\c__hyp_map_linktypes_prop{##1}bordercolor}] }
          }
          {
            \pdfannot_dict_remove:nn {link/##1} { C }
          }
     }
  }

% for now we are updating the attributes manually after \hypersetup
% some better method must be found
\NewDocumentCommand\hypupdateattribute { }
 {
   \Hy@EXPsetpdfborder
   \Hy@EXPsetpdfhighlight
   \Hy@EXPsetbordercolor
 }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%replace Hy@pstringdef definition.
%!!!!!!!! check if utf16 (string or hex) isn't better, see new-pdfescape!!!!!!!!!
%\cs_new:Npn \__hyp_pstringdef:Nn #1 #2
%  {
%    \group_begin:
%    \char_set_catcode_other:N \~
%    \char_set_active_eq:NN \~ \c_tilde_str
%    \char_set_catcode_active:N \~
%    \sys_if_engine_pdftex:TF
%      { %pdftex. Should we assume utf8 or allow other input encodings?
%        \str_gset_convert:Nnnn \g_tmpa_str {#2}{utf8}{utf8/string} %utf8 because of hyperref
%      }
%      { %luatex,xetex
%        \str_gset_convert:Nnnn \g_tmpa_str {#2}{}{utf8/string} %utf8 because of hyperref
%      }
%    \group_end:
%    \str_set_eq:NN#1 \g_tmpa_str
%  }
%\cs_generate_variant:Nn \__hyp_pstringdef:Nn {No,Nx}

% can go when all occurences in the driver have been replaced.
%\cs_set_eq:NN\Hy@pstringdef \__hyp_pstringdef:Nx

%these patterns are used in hyperref checks.
%it is unclear if they are really useful and if a backend support is
%needed.
\str_case:VnF \c_sys_backend_str
 {
   { pdfmode }
   {
     \def\HyPat@ObjRef
      {
       [0-9]*[1-9][0-9]*~0~R
      }
   }
   { dvipdfmx }
   {
     \def\HyPat@ObjRef
      {
        @[^~]+
      }
   }
   { xdvipdfmx }
   {
     \def\HyPat@ObjRef
      {
        @[^~]+
      }
   }
 }
 { %also set in hyperref sty, so probably not needed.
   \def\HyPat@ObjRef/{.+}
 }

%we force the setting of pdfversion in \DeclareDocumentMetadata
\cs_set_eq:NN \Hy@pdfminorversion \pdf_version_minor:
\cs_set_eq:NN \Hy@pdfmajorversion \pdf_version_major:

\legacy_if:nT { Hy@ocgcolorlinks }
  {
    \pdf_version_min_gset:n { 1.5 }
  }

\legacy_if:nT { Hy@setpdfversion }
 {
    \msg_warning:nn { hyp }{ pdfversion-disabled }
 }


\Hy@DisableOption{pdfversion}%

% ocg colorlinks should be done as in ocgx. This here
% are boxes ...
\legacy_if:nTF {Hy@ocgcolorlinks}
  {
    \newcommand\OBJ@OCG@view {} % for the hyperref test
    \pdf@ifdraftmode
      {}
      {
        \pdf_object_new:nn   { l_@@_ocg_view_dict_obj }   { dict }
        \pdf_object_new:nn   { l_@@_ocg_print_dict_obj }  { dict }
        \pdf_object_new:nn   { l_@@_ocg_config_dict_obj } { dict }
        \pdf_object_new:nn   { l_@@_ocg_ref_array_obj }   { array }
        \pdf_object_write:nx { l_@@_ocg_ref_array_obj }
          {
            \pdf_object_ref:n { l_@@_ocg_view_dict_obj }
            \c_space_tl
            \pdf_object_ref:n { l_@@_ocg_print_dict_obj }
          }
        \pdf_object_write:nn { l_@@_ocg_view_dict_obj }
          {
            /Type/OCG
            /Name(View)
            /Usage
             <<
              /Print <</PrintState/OFF>>~
              /View  <</ViewState/ON  >>~
             >>
          }
        \pdf_object_write:nn { l_@@_ocg_print_dict_obj }
          {
            /Type/OCG
            /Name(Print)
            /Usage
             <<
              /Print <</PrintState/ON>>~
              /View  <</ViewState/OFF>>~
             >>
          }
       \pdfmanagement_add:nnx { Catalog / OCProperties }{OCGs }{ \pdf_object_ref:n {l_@@_ocg_view_dict_obj} }
       \pdfmanagement_add:nnx { Catalog / OCProperties }{OCGs }{ \pdf_object_ref:n {l_@@_ocg_print_dict_obj} }
       \pdf_object_write:nx { l_@@_ocg_config_dict_obj }
         {
           /OFF[\pdf_object_ref:n { l_@@_ocg_print_dict_obj }]
           /AS[
             <<
              /Event/View
              /OCGs\c_space_tl \pdf_object_ref:n { l_@@_ocg_ref_array_obj }
              /Category[/View]
             >>
             <<
              /Event/Print
              /OCGs\c_space_tl \pdf_object_ref:n { l_@@_ocg_ref_array_obj }
              /Category[/Print]
             >>
             <<
              /Event/Export
              /OCGs\c_space_tl \pdf_object_ref:n { l_@@_ocg_ref_array_obj }
              /Category[/Print]
             >>
              ]
         }
       \pdfmanagement_add:nnx { Catalog / OCProperties }{ D }{ \pdf_object_ref:n { l_@@_ocg_config_dict_obj} }
    }
    \Hy@AtBeginDocument
      {
        \def\Hy@colorlink#1
          {
            \group_begin:
            \legacy_if:nTF {Hy@ocgcolorlinks}
              {
                \def\Hy@ocgcolor{#1}
                \hbox_set:Nw \l_@@_tmpa_box
              }
              {
                \HyColor@UseColor#1
              }
          }
        \def\Hy@endcolorlink
         {
           \legacy_if:nT {Hy@ocgcolorlinks}
             {
               \hbox_set_end:
               \mbox
                 {
                   \pdf_bdc_obj:nn {OC}{l_@@_ocg_print_dict_obj}
                   \hbox_overlap_right:n { \box_use:N \l_@@_tmpa_box }
                   \pdf_emc:
                   \pdf_bdc_obj:nn {OC}{l_@@_ocg_view_dict_obj}
                   \group_begin:
                   \expandafter\HyColor@UseColor\Hy@ocgcolor
                   \box_use_drop:N \l_@@_tmpa_box
                   \group_end:
                   \pdf_emc:
                }
             }
           \group_end:
         }
      }
   }
   {
     \Hy@DisableOption{ocgcolorlinks}
   }

\cs_set_protected:Npn \setpdflinkmargin #1
  {
    \pdfannot_link_margin:n { #1 }
  }

% internal definitions for anchors (destinations) and links to destinations.

\Hy@WrapperDef \@@_destination:n #1 % #1 is a destination name.
  {
    \mode_if_horizontal:T { \@savsf\spacefactor }
    \Hy@SaveLastskip      %defined in hyperref
    \Hy@VerboseAnchor{#1} %defined in hyperref, for debugging
    %\@@_pstringdef:Nx  \l_@@_tmpa_tl { \HyperDestNameFilter{#1} } %
    \@@_text_pdfstring:xoN
      { \HyperDestNameFilter{#1}  }
      { \l_@@_text_enc_dest_tl }
      \l_@@_tmpa_tl
    \tl_if_eq:NnTF  \l_@@_dest_pdfview_tl {fitrbox}
      {
        \vbox_to_zero:n
          {
           \smash
             {
               \hbox_to_zero:n
                 {
                   \exp_args:NV
                     \pdf_destination_box:nn
                       { \l_@@_tmpa_tl }
                       { \box_use:N \l_@@_dest_box }
                    \hss
                 }
             }
          }
      }
      {
        \exp_args:NV \pdf_destination:nf { \l_@@_tmpa_tl } { \l_@@_dest_pdfview_tl }
      }
    \Hy@RestoreLastskip   %defined in hyperref
    \mode_if_horizontal:T { \spacefactor\@savsf }
  }

\cs_new_protected:Npn \__hyp_link_dest_begin:nw #1
  {
    \mode_leave_vertical:
    \protected@edef \l_@@_dest_name_tmpa_tl { #1 }
    \tl_if_empty:NTF \l_@@_dest_name_tmpa_tl
      {
        \msg_warning:nnx
          { hyp }
          { empty-destination-name }
          { \c_@@_dest_undefined_tl }
        \tl_set_eq:NN \l_@@_dest_name_tmpa_tl \c_@@_dest_undefined_tl
      }
      { %I hope this is right ...
%        \__hyp_pstringdef:Nx \l_@@_dest_name_tmpa_tl
%          {
%            \exp_args:No \HyperDestNameFilter { \l_@@_dest_name_tmpa_tl }
%          }
       \@@_text_pdfstring:xoN
         { \exp_args:No \HyperDestNameFilter { \l_@@_dest_name_tmpa_tl } }
         { \l_@@_text_enc_dest_tl }
         \l_@@_dest_name_tmpa_tl
      }
    \exp_args:No
      \pdfannot_link_goto_begin:nw  { \l_@@_dest_name_tmpa_tl }
        \Hy@colorlink\@linkcolor
  }

\cs_new_protected:Npn \__hyp_link_dest_end:
  {
    \Hy@endcolorlink
    \pdfannot_link_goto_end:
  }

%% hyperref commands for destinations (anchor) and links to destinations

\cs_new_protected:Npn \hyper@anchor #1
  {
    \__hyp_destination:n {#1}\anchor@spot
  }

\cs_new_protected:Npn \hyper@anchorstart#1
  {
    \__hyp_destination:n {#1}
    \Hy@activeanchortrue
  }

\cs_new_protected:Npn \hyper@anchorend
  {
    \Hy@activeanchorfalse
  }


% hyper@linkstart/ \hyper@linkend is used for
% footnotemarks, toc and natbib-cites
% #1 is for the color only: found {cite} and {link}
% #2 is the destination name

\cs_new_protected:Npn \hyper@link #1 #2 #3 %#1 ignored, #2=destination name, #3 content
 {
  \Hy@VerboseLinkStart{#1}{#2}
  \__hyp_link_dest_begin:nw {#2}#3\Hy@xspace@end
  \__hyp_link_dest_end:
  \Hy@VerboseLinkStop
}

\cs_new_protected:Npn \hyper@linkstart #1 #2 %#1 ignored, #2=destination name
  {
    \Hy@VerboseLinkStart{#1}{#2}% only for debug
    \__hyp_link_dest_begin:nw {#2}%
  }

\cs_new_protected:Npn \hyper@linkend
  {
    \__hyp_link_dest_end:
    \Hy@VerboseLinkStop
  }

%% this command is used for \url
\cs_new_protected:Npn \hyper@linkurl #1 #2  %#1:link text #2: URI,
  {
    \group_begin:
    %\__hyp_pstringdef:Nx \l_@@_uri_tmpa_tl { #2 }
    \@@_text_pdfstring:xoN
      { #2}
      { \l_@@_text_enc_uri_print_tl }
      \l_@@_uri_tmpa_tl
    %hyper@chars, unneeded as used only once
    \cs_set_eq:NN \# \c_hash_str
    \cs_set_eq:NN \% \c_percent_str
    \Hy@safe@activestrue
    \mode_leave_vertical:
    %Subtype and A could probably also be handled with hooks if needed
    %but checks for all drivers should be done then.
    \pdfannot_link:nnn { URI }
      {
        /A
          <<
            % the action dictionary has no hook!
            /Type/Action~
            /S/URI~
            /URI\l_@@_uri_tmpa_tl~
            \ifHy@href@ismap
              /IsMap~true%
            \fi
            \Hy@href@nextactionraw
          >>
      }
      {
        \Hy@colorlink\@urlcolor
        #1
        \Hy@xspace@end
        \Hy@endcolorlink
        \Hy@VerboseLinkStop %where is the start??
      }
    \group_end:
  }
\ExplSyntaxOff

\ExplSyntaxOn
%file links to pdfs. See test-filelinks.pdf for a few example.
\cs_new_protected:Npn \hyper@linkfile #1 #2 #3 % anchor text, filename, destname
  {
    \group_begin:
    \tl_set:Nn \l_@@_filename_tmpa_tl { #2 }
    \Hy@CleanupFile \l_@@_filename_tmpa_tl
    %\__hyp_pstringdef:No \l_@@_filename_tmpa_tl { \l_@@_filename_tmpa_tl }
    \@@_text_pdfstring:ooN
      { \l_@@_filename_tmpa_tl }
      { \l_@@_text_enc_file_print_tl }
      \l_@@_filename_tmpa_tl
    %\__hyp_pstringdef:Nn \l_@@_dest_name_tmpa_tl { #3 }
    \@@_text_pdfstring:nnN
      { #3 }
      { \l_@@_text_enc_dest_print_tl }
      \l_@@_dest_name_tmpa_tl
    \Hy@MakeRemoteAction
    \mode_leave_vertical:
    \pdfannot_link:nnn %expansion??
      { GoToR }
      {
        /A<<
          /F \l_@@_filename_tmpa_tl
          /S/GoToR
          \Hy@SetNewWindow
          \ifx\\#3\\
            /D[\Hy@href@page/\l_@@_dest_pdfremotestartview_tl]
          \else
            /D \l_@@_dest_name_tmpa_tl
          \fi
          \Hy@href@nextactionraw
        >>
      }
      {
        \Hy@colorlink\@filecolor
        #1\Hy@xspace@end
        \Hy@endcolorlink
        \Hy@VerboseLinkStop %where is the start??
      }
    \group_end:
  }

% use by run links xxxxxxxxxxx
%define \hyper@linklaunch for naming consistency
\use:x
  { % filename, anchor text, linkname
    \cs_set_protected:Npn \exp_not:N \@hyper@launch run \c_colon_str ##1 \exp_not:N \\ ##2 ##3
  }
  {
    \hyper@linklaunch {#1}{#2}{#3}
  }

\cs_new_protected:Npn \hyper@linklaunch #1 #2 #3 % filename, anchor text, Parameters
 {
  \group_begin:
    %\__hyp_pstringdef:Nn \l_@@_filename_tmpa_tl { #1 } %string-hex
    \@@_text_pdfstring:nnN
      { #1 }
      { \l_@@_text_enc_file_print_tl }
      \l_@@_filename_tmpa_tl
    %\__hyp_pstringdef:Nn \l_@@_para_tmpa_tl     { #3 } %string-hex
    \@@_text_pdfstring:noN
      { #3 }
      { \l_@@_text_enc_para_print_tl }
      \l_@@_para_tmpa_tl
    %\Hy@pstringdef\Hy@pstringF{#1}%
    %\Hy@pstringdef\Hy@pstringP{#3}%
    \mode_leave_vertical:
    \pdfannot_link:nnn %expansion?
     { Launch }
     {
       /A<<
          /F~\l_@@_filename_tmpa_tl
          /S/Launch
          \Hy@SetNewWindow
          \bool_if:nF
            {
              \str_if_eq_p:Vn \l_@@_para_tmpa_tl {()}
              ||
              \pdf_version_compare_p:Nn > {1.9}
            }
            {
              /Win<</P \l_@@_para_tmpa_tl /F \l_@@_filename_tmpa_tl >>
            }
          \Hy@href@nextactionraw
         >>
      }
      {
        \Hy@colorlink\@runcolor
        #2\Hy@xspace@end
        \Hy@endcolorlink
        \Hy@VerboseLinkStop %where is the start??
      }
  \group_end:
}


%this needs central management in the kernel and changes in hyperref.
%with pdfmanagement most attributes can be set directly, there is not need
%to delay to the begin of the doc.
%as a first step hypersetup is overwritten to set (some) keys with expl3.
\cs_set_protected:Npn \hypersetup #1
  {
     \kvsetkeys{Hyp}{#1} %for now
     \keys_set:nn { hyp / setup }{ #1 }
     \hypupdateattribute
  }
% for now unknown keys should only give warnings.
\keys_define:nn { hyp / setup }
  {
    unknown .code:n =
    {
      \msg_warning:nnxxx { hyp } { unknown-key }
      { hyp~/~setup }{ \l_keys_key_str } { #1 }
    }
  }

% This means that the following keys should better be set only in hypersetup and
% not in the package options (they still could work, but ...)
% baseurl       (default: empty)
% pdflang       (default: empty, should be better set in DeclareDocumentMetadata)
% pdfpagelayout (default:not set, TwoPageLeft,TwoPageRight are 1.5 but we don't test)
% pdfpagemode   (default: UseNone or UseOutlines, bookmark should do the second)
% pdfpagescrop  (default: empty/do nothing)

% The following keys are set currently only with the original setup,
% but we don't want warnings
\keys_define:nn { hyp / setup }
  {
    ,unicode        .code:n = {}
    ,pdfencoding .code:n = {}
  }

%pdfversion is disabled
\keys_define:nn { hyp / setup }
  {
    ,pdfversion .code:n =
      {
         \msg_warning:nn { hyp }{ pdfversion-disabled }
      }
  }


\keys_define:nn { hyp / setup }
 {
   ,baseurl       .code:n =
     {
       %\__hyp_pstringdef:No \l_@@_tmpa_tl {#1}%
       \@@_text_pdfstring:ooN  { #1 } {\l_@@_text_enc_uri_print_tl} \l_@@_tmpa_tl
        \tl_if_empty:NTF \l_@@_tmpa_tl
          {
             \pdfmanagement_remove:nn {Catalog} { URI }
          }
          {
             \pdfmanagement_add:nnx {Catalog} { URI }{ <</Base \l_@@_tmpa_tl>> }
          }
     }
   ,pdfcenterwindow    .choice:
   ,pdfcenterwindow / false .code:n =
     {
       \pdfmanagement_remove:nn {Catalog / ViewerPreferences }{ CenterWindow }
     }
   ,pdfcenterwindow / true .code:n =
     {
       \pdfmanagement_add:nnn {Catalog / ViewerPreferences } { CenterWindow }{ true }
     }
   ,pdfcenterwindow /  .code:n =
     {
       \pdfmanagement_remove:nn {Catalog / ViewerPreferences }{ CenterWindow }
     }
   ,pdfcenterwindow / unknown .code:n =
     {
       \msg_warning:nnxx { hyp } { no-bool }
         { pdfcenterwindow }
         { \exp_not:n {#1} }
     }
   ,pdfcenterwindow    .default:n = true
   ,pdfdirection    .choice:
   ,pdfdirection / L2R .code:n =
     {
       \pdfmanagement_add:nnn {Catalog / ViewerPreferences } { Direction }{ /L2R }
     }
   ,pdfdirection / R2L .code:n =
     {
       \pdfmanagement_add:nnn {Catalog / ViewerPreferences } { Direction }{ /R2L }
     }
   ,pdfdirection /  .code:n =
     {
       \pdfmanagement_remove:nn {Catalog / ViewerPreferences } { Direction }
     }
   ,pdfdirection / unknown .code:n =
     {
       \msg_warning:nnxxx { hyp } { unknown-choice+empty }
         { pdfdirection }
         { L2R , R2L }
         { \exp_not:n {#1} }
     }
   ,pdfdisplaydoctitle    .choice:
   ,pdfdisplaydoctitle / false .code:n =
     {
       \pdfmanagement_remove:nn {Catalog / ViewerPreferences } { DisplayDocTitle }
     }
   ,pdfdisplaydoctitle / true .code:n =
     {
       \pdfmanagement_add:nnn {Catalog / ViewerPreferences } { DisplayDocTitle } { true }
     }
   ,pdfdisplaydoctitle    .default:n = true
   ,pdfduplex    .choices:nn =
     {Simplex, DuplexFlipShortEdge, DuplexFlipLongEdge}
     {
       \pdf_version_compare:NnTF > {1.6}
         {
           \pdfmanagement_add:nnn {Catalog / ViewerPreferences }
             { PrintDuplex } { /#1 }
         }
         {
           \msg_warning:nnxx
             {hyp}
             {ignore-deprecated-or-unknown-option-in-pdf-version}
             {pdfduplex}
             {\pdf_version:}
         }
     }%
   ,pdfduplex /  .code:n =
     {
       \pdfmanagement_remove:nn {Catalog / ViewerPreferences } { PrintDuplex }
     }
   ,pdfduplex / unknown .code:n =
     {
       \msg_warning:nnxxx { hyp } { unknown-choice+empty }
         { pdfduplex }
         { Simplex, DuplexFlipShortEdge, DuplexFlipLongEdge }
         { \exp_not:n {#1} }
     }
   ,pdffitwindow    .choice:
   ,pdffitwindow / false .code:n =
     {
       \pdfmanagement_remove:nn {Catalog / ViewerPreferences }  { FitWindow }
     }
   ,pdffitwindow / true .code:n =
     {
       \pdfmanagement_add:nnn {Catalog / ViewerPreferences } { FitWindow } { true }
     }
   ,pdffitwindow /  .code:n =
     {
       \pdfmanagement_remove:nn {Catalog / ViewerPreferences } { FitWindow }
     }
   ,pdffitwindow    .default:n = true
   ,pdffitwindow / unknown .code:n =
     {
       \msg_warning:nnxx { hyp } { no-bool }
         { pdffitwindow }
         { \exp_not:n {#1} }
     }
   ,pdflang       .code:n =
          {
            \tl_if_empty:nTF { #1 }
              {
                \pdfmanagement_remove:nn {Catalog} { Lang }
              }
              {
                \pdfmanagement_add:nnx {Catalog} { Lang } { (#1) }
              }
          }
   ,pdfmenubar    .choice:
   ,pdfmenubar / true .code:n =
     {
       \pdfmanagement_remove:nn {Catalog / ViewerPreferences } { HideMenubar }
     }
   ,pdfmenubar / false .code:n =
     {
       \pdfmanagement_add:nn {Catalog / ViewerPreferences }
          { HideMenubar } { true }
     }
   ,pdfmenubar /  .code:n =
     {
       \pdfmanagement_remove:nn {Catalog / ViewerPreferences } { HideMenubar }
     }
   ,pdfmenubar    .default:n = true
   ,pdfmenubar / unknown .code:n =
     {
       \msg_warning:nnxx { hyp } { no-bool }
         { pdfmenubar }
         { \exp_not:n {#1} }
     }
   ,pdfnonfullscreenpagemode   .choices:nn =
     { UseNone, UseOutlines, UseThumbs, FullScreen, UseOC } %pdf 1.5
     {
       \pdfmanagement_add:nnx {Catalog / ViewerPreferences }
         { NonFullScreenPageMode} {/#1}
     }
   ,pdfnonfullscreenpagemode / UseAttachments .code:n =
     {
       \pdf_version_compare:NnTF < {1.6}
         {
           %message
         }
         {
           \pdfmanagement_add:nnx {Catalog / ViewerPreferences }
             {NonFullScreenPageMode}{/UseAttachments}
         }
     }
   ,pdfnonfullscreenpagemode /  .code:n =
     {
       \pdfmanagement_remove:nn {Catalog / ViewerPreferences } { NonFullScreenPageMode }
     }
   ,pdfnonfullscreenpagemode / unknown .code:n =
     {
       \msg_warning:nnxxx { hyp } { unknown-choice+empty }
         { pdfnonfullscreenpagemode }
         { UseNone, UseOutlines, UseThumbs, FullScreen, UseOC, UseAttachments (PDF 1.6) }
         { \exp_not:n {#1} }
     }
   ,pdfnumcopies .code:n =
     {
       \pdf_version_compare:NnTF > {1.6}
         {
           \tl_if_empty:nTF {#1}
             {
               \pdfmanagement_remove:nn {Catalog / ViewerPreferences } { NumCopies }
             }
             {
               \pdfmanagement_add:nnx {Catalog / ViewerPreferences }
                 {NumCopies}{#1}
             }
         }
         {
           \msg_warning:nnxx
             {hyp}
             {ignore-deprecated-or-unknown-option-in-pdf-version}
             {pdfnumcopies}
             {\pdf_version:}
         }
     }
   ,pdfpagelayout .choices:nn =
     { SinglePage, OneColumn, TwoColumnLeft, TwoColumnRight, TwoPageLeft, TwoPageRight}
     { \pdfmanagement_add:nnx {Catalog} { PageLayout }{ /#1 } }
   ,pdfpagelayout / .code:n =
     { \pdfmanagement_remove:nn {Catalog} { PageLayout } }
   ,pdfpagelayout / unknown .code:n =
     {
       \msg_warning:nnxxx { hyp } { unknown-choice+empty }
         { pdfpagelayout }
         { SinglePage, OneColumn, TwoColumnLeft, TwoColumnRight, TwoPageLeft, TwoPageRight }
         { \exp_not:n {#1} }
     }
   ,pdfpagemode   .choices:nn =
     { UseNone, UseOutlines, UseThumbs, FullScreen, UseOC } %pdf 1.5
     { \pdfmanagement_add:nnx {Catalog} { PageMode }{ /#1 } }
   ,pdfpagemode / UseAttachments .code:n =
     {
       \pdf_version_compare:NnTF > {1.5}
         {
           \pdfmanagement_add:nnx {Catalog} { PageMode }{ /UseAttachments }
         }
         {
           \msg_warning:nnxx
             {hyp}
             {ignore-deprecated-or-unknown-value-in-pdf-version}
             {UseAttachments}
             {\pdf_version:}
         }
     }
   ,pdfpagemode   .initial:n  = { UseOutlines } %for now ...
   ,pdfpagemode / unknown .code:n =
     {
       \msg_warning:nnxxx { hyp } { unknown-choice+empty }
         { pdfpagemode }
         { UseNone, UseOutlines, UseThumbs, FullScreen, UseOC, UseAttachments (PDF 1.6) }
         { \exp_not:n {#1} }
     }
   ,pdfpagescrop  .code:n =
     {
       \tl_if_empty:nTF %or blank?
         {
           \pdfmanagement_remove:nn {Pages} { CropBox }
         }
         {
           \pdfmanagement_add:nnx {Pages} { CropBox } { [#1] }
         }
     }
   ,pdfpicktraybypdfsize    .choice:
   ,pdfpicktraybypdfsize / true .code:n =
     {
       \pdf_version_compare:NnTF > {1.6}
         {
           \pdfmanagement_add:nnn {Catalog / ViewerPreferences }
             { PickTrayByPDFSize } { true }
         }
         {
           \msg_warning:nnxx
             {hyp}
             {ignore-deprecated-or-unknown-option-in-pdf-version}
             {pdfpicktraybypdfsize}
             {\pdf_version:}
         }
     }
   ,pdfpicktraybypdfsize / false .code:n =
     {
       \pdf_version_compare:NnTF > {1.6}
         {
           \pdfmanagement_add:nnn {Catalog / ViewerPreferences }
             { PickTrayByPDFSize } { false }
         }
         {
           \msg_warning:nnxx
             {hyp}
             {ignore-deprecated-or-unknown-option-in-pdf-version}
             {pdfpicktraybypdfsize}
             {\pdf_version:}
         }
     }
   ,pdfpicktraybypdfsize /  .code:n =
     {
       \pdfmanagement_remove:nn {Catalog / ViewerPreferences } { PickTrayByPDFSize }
     }
   ,pdfpicktraybypdfsize / unknown .code:n =
     {
       \msg_warning:nnxx { hyp } { no-bool }
         { picktraybypdfsize }
         { \exp_not:n {#1} }
     }
   ,pdfprintarea    .choices:nn =
     { MediaBox, CropBox, BleedBox, TrimBox, ArtBox }
     {
       \pdf_version_compare:NnTF < {2.0}
         {
           \pdfmanagement_add:nnx {Catalog / ViewerPreferences }
             { PrintArea } { /#1 }
         }
         {
           \msg_warning:nnxx
             {hyp}
             {ignore-deprecated-or-unknown-option-in-pdf-version}
             {pdfprintarea}
             {\pdf_version:}
         }
     }%
   ,pdfprintarea /  .code:n =
     { \pdfmanagement_remove:nn {Catalog / ViewerPreferences } { PrintArea } }
   ,pdfprintarea / unknown .code:n =
     {
       \msg_warning:nnxxx { hyp } { unknown-choice+empty }
         { pdfprintarea }
         { MediaBox, CropBox, BleedBox, TrimBox, ArtBox }
         { \exp_not:n {#1} }
     }
   ,pdfprintclip    .choices:nn =
     { MediaBox, CropBox, BleedBox, TrimBox, ArtBox }
     {
       \pdf_version_compare:NnTF < {2.0}
         {
           \pdfmanagement_add:nnx {Catalog / ViewerPreferences }
             { PrintClip } { /#1 }
         }
         {
           \msg_warning:nnxx
             {hyp}
             {ignore-deprecated-or-unknown-option-in-pdf-version}
             {pdfprintclip}
             {\pdf_version:}
         }
     }%
   ,pdfprintclip /  .code:n =
     {
       \pdfmanagement_remove:nn {Catalog / ViewerPreferences } { PrintClip }
     }
   ,pdfprintclip / unknown .code:n =
     {
       \msg_warning:nnxxx { hyp } { unknown-choice+empty }
         { pdfprintclip }
         { MediaBox, CropBox, BleedBox, TrimBox, ArtBox }
         { \exp_not:n {#1} }
     }
   ,pdfprintpagerange .code:n =
     {
       \pdf_version_compare:NnTF > {1.6}
         {
           \tl_if_empty:nTF { #1}
             {
               \pdfmanagement_remove:nn {Catalog / ViewerPreferences }
                 { PrintPageRange }
             }
             {
              \pdfmanagement_add:nnx {Catalog / ViewerPreferences }
                 {PrintPageRange}{[#1]}
             }
         }
         {
            \msg_warning:nnxx
              {hyp}
              {ignore-deprecated-or-unknown-option-in-pdf-version}
              {pdfprintpagerange}
              {\pdf_version:}
         }
     }
   ,pdfprintscaling    .choices:nn =
     { None, AppDefault }
     {
       \pdf_version_compare:NnTF > {1.5}
         {
           \pdfmanagement_add:nnx {Catalog / ViewerPreferences }
             { PrintScaling } { /#1 }
         }
         {
           \msg_warning:nnxx
             {hyp}
             {ignore-deprecated-or-unknown-option-in-pdf-version}
             {pdfprintscaling}
             {\pdf_version:}
         }
     }%
   ,pdfprintscaling /  .code:n =
     {
       \pdfmanagement_remove:nn {Catalog / ViewerPreferences } {PrintScaling }
     }
   ,pdfprintscaling / unknown .code:n =
     {
       \msg_warning:nnxxx { hyp } { unknown-choice+empty }
         { pdfprintarea }
         { None, AppDefault }
         { \exp_not:n {#1} }
     }
   ,pdfremotestartview .code:n =
     {
       \tl_set:Nx \l_@@_tmpa_tl {#1~null~null~null~}
       \exp_args:NNV
       \regex_extract_once:NnNTF \c_@@_dest_startview_regex \l_@@_tmpa_tl  \l_@@_tmpa_seq
         {
           \tl_set:Nx \l_@@_dest_pdfremotestartview_tl {\seq_item:Nn \l_@@_tmpa_seq {1}}
         }
         {
           \msg_warning:nnnn {hyp}{invalid-destination-value}{#1}{pdfremotestartview}
           \tl_set:Nn \l_@@_dest_pdfremotestartview_tl {Fit}
         }
     }
   ,pdfremotestartview .initial:n = {Fit}
   % pdfstartpage is special as it shares code with pdfstartview
   ,pdfstartpage .code:n =
     {
       \tl_gset:Nx \g_@@_dest_pdfstartpage_tl { #1 }
       \bool_if:nTF
         { \tl_if_empty_p:N \g_@@_dest_pdfstartpage_tl || \tl_if_empty_p:N \g_@@_dest_pdfstartview_tl }
         {
           \pdfmanagement_remove:nn {Catalog} { OpenAction }
         }
         {
           \pdfmanagement_add:nnx {Catalog} { OpenAction }
             {
               [\pdf_object_pageref:n {\g_@@_dest_pdfstartpage_tl}~/\g_@@_dest_pdfstartview_tl]
             }
         }
     }
   ,pdfstartpage .initial:n =1
   ,pdfstartview .code:n =
     {
       \tl_set:Nx \l_@@_tmpa_tl {#1~null~null~null~}
       \exp_args:NNV
       \regex_extract_once:NnNTF \c_@@_dest_startview_regex \l_@@_tmpa_tl  \l_@@_tmpa_seq
         {
           \tl_gset:Nx \g_@@_dest_pdfstartview_tl {\seq_item:Nn \l_@@_tmpa_seq {1}}
         }
         {
           \msg_warning:nnnn {hyp}{invalid-destination-value}{#1}{pdfstartview}
           \tl_gset:Nn \g_@@_dest_pdfstartview_tl {Fit}
         }
       \bool_if:nTF
         { \tl_if_empty_p:N \g_@@_dest_pdfstartpage_tl || \tl_if_empty_p:N \g_@@_dest_pdfstartview_tl }
         {
           \pdfmanagement_remove:nn {Catalog} { OpenAction }
         }
         {
           \pdfmanagement_add:nnx {Catalog} { OpenAction }
             {
               [\pdf_object_pageref:n {\g_@@_dest_pdfstartpage_tl}~/\g_@@_dest_pdfstartview_tl]
             }
         }
     }
   ,pdfstartview .initial:n = Fit
   ,pdftoolbar    .choice:
   ,pdftoolbar / true .code:n =
     {
       \pdfmanagement_remove:nn {Catalog / ViewerPreferences } { HideToolbar }
     }
   ,pdftoolbar / false .code:n =
     {
       \pdfmanagement_add:nnn {Catalog / ViewerPreferences }
         { HideToolbar } { true }
     }
   ,pdftoolbar / true .code:n =
     {
       \pdfmanagement_remove:nn {Catalog / ViewerPreferences } { HideToolbar }
     }
   ,pdftoolbar    .default:n = true
   ,pdftoolbar / unknown .code:n =
     {
       \msg_warning:nnxx { hyp } { no-bool }
         { pdftoolbar }
         { \exp_not:n {#1} }
     }
   % pdfview see below.
   ,pdfviewarea    .choices:nn =
     { MediaBox, CropBox, BleedBox, TrimBox, ArtBox }
     {
       \pdf_version_compare:NnTF < {2.0}
         {
           \pdfmanagement_add:nnn {Catalog / ViewerPreferences }
             { ViewArea } { /#1 }
         }
         {
           \msg_warning:nnxx
             {hyp}
             {ignore-deprecated-or-unknown-option-in-pdf-version}
             {pdfviewarea}
             {\pdf_version:}
         }
     }%
   ,pdfviewarea /  .code:n =
     {
       \pdfmanagement_remove:nn {Catalog / ViewerPreferences } { ViewArea }
     }
   ,pdfviewarea / unknown .code:n =
     {
       \msg_warning:nnxxx { hyp } { unknown-choice+empty }
         { pdfviewarea }
         { MediaBox, CropBox, BleedBox, TrimBox, ArtBox }
         { \exp_not:n {#1} }
     }
   ,pdfviewclip    .choices:nn =
     { MediaBox, CropBox, BleedBox, TrimBox, ArtBox }
     {
       \pdf_version_compare:NnTF < {2.0}
         {
           \pdfmanagement_add:nnn {Catalog / ViewerPreferences }
             { ViewClip } { /#1 }
         }
         {
           \msg_warning:nnxx
             {hyp}
             {ignore-deprecated-or-unknown-option-in-pdf-version}
             {pdfviewclip}
             {\pdf_version:}
         }
     }%
   ,pdfviewclip /  .code:n =
     {
       \pdfmanagement_remove:nn {Catalog / ViewerPreferences } { ViewClip }
     }
   ,pdfviewclip / unknown .code:n =
     {
       \msg_warning:nnxxx { hyp } { unknown-choice+empty }
         { pdfviewclip }
         { MediaBox, CropBox, BleedBox, TrimBox, ArtBox }
         { \exp_not:n {#1} }
     }
   ,pdfwindowui    .choice:
   ,pdfwindowui / true .code:n =
     {
       \pdfmanagement_remove:nn {Catalog / ViewerPreferences } { HideWindowUI }
     }
   ,pdfwindowui / false .code:n =
     {
       \pdfmanagement_add:nnn {Catalog / ViewerPreferences }
          { HideWindowUI } { true }
     }
   ,pdfwindowui /  .code:n =
     {
       \pdfmanagement_remove:nn {Catalog / ViewerPreferences } {HideWindowUI }
     }
   ,pdfwindowui / unknown .code:n =
     {
       \msg_warning:nnxx { hyp } { no-bool }
         { pdfwindowui }
         { \exp_not:n {#1} }
     }
   ,pdfwindowui    .default:n = true
 }

% Destination keys. pdfview is a bit more complicated so extra.
\keys_define:nn { hyp / setup }
  {
    ,pdfview .code:n =
      {
        \seq_set_split:Nnn \l_@@_tmpa_seq {~}{#1}
        \str_case_e:nnF { \str_lowercase:f{ \seq_item:Nn \l_@@_tmpa_seq {1} } }
           {
             { xyz }
               {
                 \int_compare:nNnTF {\seq_count:N \l_@@_tmpa_seq } > { 1 }
                   {
                     \seq_get_right:NN \l_@@_tmpa_seq \l_@@_tmpa_tl
                     \tl_if_eq:NnTF \l_@@_tmpa_tl {null}
                       {
                         \tl_set:Nn \l_@@_dest_pdfview_tl {xyz}
                       }
                       {
                         \tl_set:Nx \l_@@_dest_pdfview_tl
                            {
                               \fp_eval:n { \l_@@_tmpa_tl * 100 }
                            }
                       }
                   }
                   {
                     \tl_set:Nn \l_@@_dest_pdfview_tl {xyz}
                   }
               }
             { fit }   { \tl_set:Nn \l_@@_dest_pdfview_tl {fit}  }
             { fitb }  { \tl_set:Nn \l_@@_dest_pdfview_tl {fitb} }
             { fitbh } { \tl_set:Nn \l_@@_dest_pdfview_tl {fitbh}}
             { fitbv } { \tl_set:Nn \l_@@_dest_pdfview_tl {fitbv}}
             { fith }  { \tl_set:Nn \l_@@_dest_pdfview_tl {fith} }
             { fitv }  { \tl_set:Nn \l_@@_dest_pdfview_tl {fitv} }
             { fitr }
               {
                 \int_compare:nNnTF {\seq_count:N \l_@@_tmpa_seq } = {1}
                   {
                     \tl_set:Nn \l_@@_dest_pdfview_tl {fitr}
                   }
                   {
                      %ensure 4 values ...
                     \tl_set:Nn \l_@@_dest_pdfview_tl {fitrbox}
                     \seq_put_right:Nn \l_@@_tmpa_seq  {0}
                     \seq_put_right:Nn \l_@@_tmpa_seq  {0}
                     \seq_put_right:Nn \l_@@_tmpa_seq  {0}
                     \hbox_set_to_wd:Nnn \l_@@_dest_box
                       {
                         \fp_eval:n
                          {
                            round
                             (
                               abs
                                (
                                  \seq_item:Nn\l_@@_tmpa_seq{4}
                                  -
                                  (\seq_item:Nn\l_@@_tmpa_seq{2})
                                 ),
                                3
                             )
                          }bp
                       }{}
                     \box_set_dp:Nn \l_@@_dest_box
                       {
                         \fp_eval:n
                           {
                             round(0 - (\seq_item:Nn\l_@@_tmpa_seq{3}),3)
                           }bp
                       }
                     \box_set_ht:Nn \l_@@_dest_box
                       {
                         \seq_item:Nn\l_@@_tmpa_seq{5}bp
                       }
                   }
               }
           }
           {
              \msg_warning:nnnn {hyp}{invalid-destination-value}{#1}{pdfview}
              \tl_set:Nn \l_@@_dest_pdfview_tl {fit}
           }
      }
    ,pdfview .initial:n  = {xyz}
  }
% styles and colors.
% this needs some sorting.
% should colorlinks reset the border?
% which colors should be used?
% should we use the generic hooks or make hyp specific hooks?
% what about font changes?
% hooks are global, is this the right thing to use here?
% perhaps the hook should only take a tl and this is filled?
\keys_define:nn { hyp / setup }
  {
    ,pdfborder  .code:n =
      {
        \tl_set:Nn \@pdfborder {#1}
      }
    ,pdfborder .initial:n = {0~0~1},
    ,pdfborderstyle .code:n =
      {
        \tl_set:Nn \@pdfborderstyle {#1}
      }
    ,pdfborderstyle .initial:n = {},
    ,colorlinks .meta:n = {pdfborder={0~0~0},pdfborderstyle={}}
    ,ocgcolorlinks .meta:n = {pdfborder={0~0~0},pdfborderstyle={}}
  }

\hypupdateattribute

%"info" keys
% as hyperref resets some at begin document,
% they only work correctly if set later ...
% for now they use hex_print_encoding
% later we can add instruction to add to meta data here
\cs_new_protected:Npn \__hyp_setup_info_key:nn #1 #2
  {
    \keys_define:nn { hyp / setup }
      {
        pdf#1  .code:n =
          {
            \tl_if_blank:nTF {##1}
              {
                \pdfmanagement_remove:nn {Info}{#2}
              }
              {
                \@@_text_pdfstring_info:nN {##1}\l_@@_tmpa_str
                \pdfmanagement_add:nnx {Info}{#2}{\l_@@_tmpa_str}
              }
          }
      }
    \keys_define:nn { hyp / info }
      {
        #2  .code:n =
          {
            \tl_if_blank:nTF {##1}
              {
                \pdfmanagement_remove:nn {Info}{#2}
              }
              {
                \@@_text_pdfstring_info:nN {##1}\l_@@_tmpa_str
                \pdfmanagement_add:nnx {Info}{#2}{\l_@@_tmpa_str}
              }
          }
        ,unknown .code:n =
         {
            \@@_text_pdfstring_info:nN {##1}\l_@@_tmpa_str
            \exp_args:Nnx
              \pdfmanagement_add:nnx {Info}{\pdf_text_convert:nV {name }\l_keys_key_str}{\l_@@_tmpa_str}
         }
      }
  }
\__hyp_setup_info_key:nn {author}   {Author}
\__hyp_setup_info_key:nn {title}    {Title}
\__hyp_setup_info_key:nn {producer} {Producer}
\__hyp_setup_info_key:nn {creator}  {Creator}
% ignored key: addtopdfcreator
\__hyp_setup_info_key:nn {creationdate}  {Creationdate}
\__hyp_setup_info_key:nn {moddate}  {ModDate}
\__hyp_setup_info_key:nn {subject}  {Subject}
\__hyp_setup_info_key:nn {keywords}  {Keywords}

%pdfinfo allows to set the key with keyval ...
\keys_define:nn { hyp / setup }
  {
    pdfinfo .code:n =
      {
        \keys_set:nn { hyp / info } { #1 }
      }
  }

% default values
\keys_set:nn { hyp / setup} {pdfcreator = LaTeX~with~hyperref}
\keys_set:nn { hyp / setup} {pdfauthor  = }
\keys_set:nn { hyp / setup} {pdftitle   = }
\keys_set:nn { hyp / setup} {pdfsubject  = }
%Trapped is a bit curious, it has an value "unknown", and one can't suppress it ...
\keys_define:nn { hyp / setup }
  {
    ,pdftrapped .code:n =
      {
        \exp_args:Nne
          \keys_set:nn { hyp / setup } { __pdftrapped = \str_uppercase:n { #1 } }
      }
    ,__pdftrapped  .choices:nn = {TRUE,FALSE,UNKNOWN}
       {
         \pdfmanagement_add:nnx {Info}{Trapped}
           {/
             \str_uppercase:f { \str_head:n { #1 } }
             \str_lowercase:f { \str_tail:n { #1 } }
           }
       }
    ,__pdftrapped / unknown .code:n =
       {
         \msg_warning:nnxxx { hyp } { unknown-choice }
           { pdftrapped }
           { true~(case~insensitive), false~(case~insensitive), unknown~(case~insensitive) }
           { \exp_not:n {#1} }
       }
  }

\cs_set_protected:Npn \PDF@SetupDoc
  {}

\def\PDF@FinishDoc{}% dummy needed for hyperref ...


\AddToHook{env/document/before}{
  \pdf@ifdraftmode{}{
    %!!!!! this must be handled somehow
    \Hy@UseMaketitleInfos %get/set Title/Author from \title if pdfusetitle is true
    }}


% pdfpageduration sets the duration a page is shown in full screen mode.

\keys_define:nn { hyp / setup }
  {
    pdfpageduration .code:n =
     {
        \tl_if_blank:nTF { #1 }
          {
            \pdfmanagement_remove:nn {Page}{Dur}
          }
          {
            \pdfmanagement_add:nnn {Page}{Dur}{#1}
          }
     }
  }

% Transition settings are used by (some) pdf viewers when presenting a
% pdf in full screen mode. They are added to the page settings and describe the
% transition from the previous page to current page. Transition setting can be
% set in the preamble for all pages or in the document for the current and the
% following pages. Due to the asynchronous page breaking one has to be careful
% to set it on the right page, e.g. only after a |\newpage|.
% The generic driver uses a different syntax than the other hyperref drivers:
% various transition options can be set by a keyval syntax in the value of
% |pdfpagetransition|. A typical setting looks e.g. like this\\
% |\hypersetup{pdfpagetransition={style=Fly,duration=2,direction=90,opaque=false}}|
%
% The keys allowed in the argument of |pdfpagetransition| are
% \begin{tabular}{l>{\raggedright}p{6cm}}
% style    &  one of Split, Blinds, Box, Wipe, Dissolve, Glitter, R, Fly, Push, Cover, Uncover, Fade\\
% duration &  a number, describes the duration of the transition\\
% direction& \begin{tabular}[t]{l}
%             H~(horizontal,~only~Split,~Blinds)\\
%             V~(vertical,~only~Split,~Blinds)\\
%             0~(left~to~right,~only~Wipe,~Glitter,~Fly,~Cover,~Uncover,~Push)\\
%             90~(bottom~to~top,~only~Wipe)\\
%             180~(right~to~left,~only~Wipe)\\
%             270~(top~to~bottom,~only~Wipe,~Glitter,~Fly,~Cover,~Uncover,~Push)\\
%             315~(top~left~to~bottom,~only~Glitter)\\
%             None~(only~Fly)
%             \end{tabular}\\
% motion   & one of I, O, only relevant for Split, Box and Fly\\
% scale    & a number, only relevant for Fly style \\
% opaque   & true or false, only relevant for Fly style
% \end{tabular}

\keys_define:nn { hyp / setup }
  {
    pdfpagetransition .code:n =
     {
       \tl_if_blank:nTF {#1}
         {
           \pdfmanagement_remove:nn {Page}{Trans}
         }
         {
           \group_begin:
           \keys_set:nn { hyp / trans }{style=R,#1}
           \pdf_object_now:nx { dict }
             {
               \pdfdict_use:n {l_@@_page/Trans}
             }
           \pdfmanagement_add:nnx {Page}{Trans}{\pdf_object_last:}
           \group_end:
         }
     }
  }
\keys_define:nn { hyp / trans }
  {
    ,style .choices:nn =
      {Split,Blinds,Box,Wipe,Dissolve,Glitter,R,Fly,Push,Cover,Uncover,Fade}
      { \pdfdict_put:nnn {l_@@_page/Trans}{ S }{/#1} }
    ,style / unknown .code:n =
      {
        \msg_warning:nnxxx { hyp } { unknown-choice }
           { trans / style }
           { Split,Blinds,Box,Wipe,Dissolve,Glitter,R,Fly,Push,Cover,Uncover,Fade }
           { \exp_not:n {#1} }
      }
    ,duration .code:n  =
      {
        \pdfdict_put:nnn {l_@@_page/Trans}{ D }{#1}
      }
    ,direction .choices:nn =
      {H,V}
      { \pdfdict_put:nnn {l_@@_page/Trans}{ S }{/#1} }
    ,direction .choices:nn =
      {0,90,180,270,315}
      { \pdfdict_put:nnn {l_@@_page/Trans}{ DI }{ #1 } }
    ,direction / None .code:n =
      { \pdfdict_put:nnn {l_@@_page/Trans}{ DI }{ /None } }
    ,direction / unknown .code:n =
      {
        \msg_warning:nnxxx { hyp } { unknown-choice }
           { trans / direction }
           {
             H~(horizontal,~only~Split,~Blinds),
             V~(vertical,~only~Split,~Blinds),
             0~(left~to~right,~only~Wipe,~Glitter,~Fly,~Cover,~Uncover,~Push),
             90~(bottom~to~top,~only~Wipe),
             180~(right~to~left,~only~Wipe),
             270~(top~to~bottom,~only~Wipe,~Glitter,~Fly,~Cover,~Uncover,~Push),
             315~(top~left~to~bottom,~only~Glitter),
             None~(only~Fly)
           }
           { \exp_not:n {#1} }
      }
    ,motion .choices:nn =
     {I,O}
     { \pdfdict_put:nnn {l_@@_page/Trans}{ M }{/#1} }
    ,motion / unknown .code:n =
      {
        \msg_warning:nnxxx { hyp } { unknown-choice }
           { trans / motion }
           { I~(inwards) , O~(outwards) }
           { \exp_not:n {#1} }
      }
     ,scale .code:n =
       { \pdfdict_put:nnn { l_@@_page/Trans }{ SS }{ #1 } }
     ,opaque .choices:nn = {true,false}
       { \pdfdict_put:nnn { l_@@_page/Trans }{ B } { #1} }
     ,opaque / unknown .code:n =
       {
          \msg_warning:nnxxx { hyp } { unknown-choice }
           { trans / B }
           { true~(opaque~back,~only~Fly), false~(opaque~back,~only~Fly) }
           { \exp_not:n {#1} }
       }
     % try to set unknown keys as style
     ,unknown .code:n =
       {
         % warning ...
         \exp_args:Nnx\keys_set:nn {hyp/trans}{ style=\l_keys_key_str }
       }
  }

%%% UF removed setpagesize code, should be done by kernel/graphicx
%!! do we need a action dict type??
\RenewDocumentCommand \Acrobatmenu { m m }
 {
   \pdfmeta_if_named_action_allowed:nTF {#1}
     {
       \mode_leave_vertical:
       \pdfannot_link:nnn { Named }
         {
           /A
             <<
               /S/Named
               /N\pdf_text_convert:nn{name-print}{#1}
               \Hy@href@nextactionraw
             >>
         }
         {
           \Hy@colorlink\@menucolor#2
           \Hy@xspace@end
           \Hy@endcolorlink
           \Hy@VerboseLinkStop
         }
      }
      {
        % named action not allowed ...
        % error??
        #2
      }
  }


\NewDocumentCommand \MakeFieldObject { m m }
  {
    \pdf_xform_new:nnn { #2 }{} { #1 }
  }


\prop_new:N   \g__hyp_AcroForm_CoFields_prop
\prop_new:N   \g__hyp_AcroForm_Fields_prop

\let\HyField@afields\ltx@empty
\let\HyField@cofields\ltx@empty
%% UF test for old pdftex removed
%\let\HyField@AuxAddToFields\ltx@gobble
%\let\HyField@AuxAddToCoFields\ltx@gobbletwo
\def\HyField@AfterAuxOpen{\Hy@AtBeginDocument}%

% the value doesn't matter, but with a prop we avoid duplicates and it is
% clearly faster than removing them from a sequence
\def\HyField@AuxAddToFields#1
  {
    \prop_gput:Nnn \g__hyp_AcroForm_Fields_prop {#1}{F}
  }%

%fields with empty key get a value too -- lets hope that
%this give the expected behaviour
\def\HyField@AuxAddToCoFields #1 #2
  {
    \prop_gput:Nnn \g__hyp_AcroForm_CoFields_prop {a#1}{#2}
  }

\Hy@AtBeginDocument
  {
    \if@filesw
      \immediate\write\@mainaux{%
        \string\providecommand\string\HyField@AuxAddToFields[1]{}%
       }%
      \immediate\write\@mainaux{%
        \string\providecommand\string\HyField@AuxAddToCoFields[2]{}%
      }%
    \fi
    \let\HyField@AfterAuxOpen\@firstofone
  }%

\def\HyField@AddToFields
  {
    \exp_args:Nx\HyField@@AddToFields
      {
        %\pdf_link_last:
        \pdfannot_box_last:
      }
    \ifx\Fld@calculate@code\ltx@empty
    \else
      \begingroup
        \Hy@safe@activestrue
        \edef\Hy@temp{%
          \endgroup
          \if@filesw
            \write\@mainaux
             {
              \string\HyField@AuxAddToCoFields
               {
                \Fld@calculate@sortkey
               }
               {
                 %  \pdf_link_last:
                 \pdfannot_box_last:
               }
            }
          \fi
        }%
      \Hy@temp
    \fi
  }%

\def\HyField@@AddToFields#1{
  \HyField@AfterAuxOpen{%
    \if@filesw
      \write\@mainaux{%
        \string\HyField@AuxAddToFields{#1}%
        }%
      \fi
    }%
  }%

\ExplSyntaxOff
\ExplSyntaxOn
\tl_new:N  \l_@@_CheckmarkYes_tl
\tl_set:Nn \l_@@_CheckmarkYes_tl {  __hyp_xform_CheckMarkYes }
\tl_new:N  \l_@@_CheckmarkOff_tl
\tl_set:Nn \l_@@_CheckmarkOff_tl {  __hyp_xform_CheckMarkOff }

\def\@Form[#1]
  {
    \@ifundefined{textcolor}{\let\textcolor\@gobble}{}
    \kvsetkeys{Form}{#1}
    \pdf@ifdraftmode{}
      {
        \Hy@FormObjects
        \prop_map_inline:Nn \g__hyp_AcroForm_Fields_prop
          {
            \pdfmanagement_add:nnx { Catalog / AcroForm } { Fields }{##1}
            %\pdfmanagement_show:n { Catalog / AcroForm }
            %\seq_show:c { g__pdf_/Catalog/AcroForm/Fields_seq} %!!!!!
          }
        \prop_if_empty:NF \g__hyp_AcroForm_CoFields_prop
          {
            \prop_map_inline:Nn \g__hyp_AcroForm_CoFields_prop
              {
                \seq_put_right:Nn \l_@@_tmpa_seq {##1}
              }
            \seq_sort:Nn \l_@@_tmpa_seq
              {
                \int_compare:nNnTF { \pdf@strcmp{##1}{##2} } > { 0 }
                %\int_compare:nNnTF { \__str_if_eq:nn {#1}{#2} } > { 0 }
                  { \sort_return_swapped: }
                  { \sort_return_same: }
              }
            \seq_map_inline:Nn \l_@@_tmpa_seq
             {
                \pdfmanagement_add:nnx { Catalog / AcroForm }
                  { CO }
                  {
                    \prop_item:Nn \g__hyp_AcroForm_CoFields_prop {##1}
                  }
             }
          }
       \pdfmanagement_add:nnx {Catalog / AcroForm/DR/Font }
         {ZaDb} {\pdf_object_ref:n {l_@@_font_zapfdingbats_obj} }
       \pdfmanagement_add:nnx {Catalog / AcroForm/DR/Font }
         {Helv} {\pdf_object_ref:n {l_@@_font_helvetica_obj} }
       \pdfmanagement_add:nnx {Catalog /AcroForm}
         {DA}{(/Helv~10~Tf~0~g)}
       \prop_if_in:NnTF\g_pdfmeta_standard_prop {form_no_NeedAppearance}
         {
           \pdfmanagement_remove:nn {Catalog / AcroForm }{NeedAppearances}
         }
         {
           \legacy_if:nT { HyField@NeedAppearances }
             {
               \pdfmanagement_add:nnn {Catalog / AcroForm }{NeedAppearances}{true}
             }
         }
       }
     \MakeFieldObject
       {
         \group_begin:
         \fontfamily{pzd}
         \fontencoding{U}
         \fontseries{m}
         \fontshape{n}
         \selectfont
         \char123
         \group_end:
       }
       {__hyp_xform_Ding}
    \MakeFieldObject
       {
         \group_begin:
         \fontfamily{pzd}
         \fontencoding{U}
         \fontseries{m}
         \fontshape{n}
         \selectfont
         \phantom{\char123}
         \group_end:
       }
       {__hyp_xform_DingOff}
     \MakeFieldObject
       {
         \group_begin:
         \fontfamily{pzd}
         \fontencoding{U}
         \fontseries{m}
         \fontshape{n}
         \selectfont
         \char51
         \group_end:
       }
       {__hyp_xform_CheckMarkYes}
     \MakeFieldObject
       {
        \group_begin:
         \fontfamily{pzd}
         \fontencoding{U}
         \fontseries{m}
         \fontshape{n}
         \selectfont
         \phantom{\char51} %perhaps xetex needs some small glyph ..
         \group_end:
       }
       {__hyp_xform_CheckMarkOff}
     \MakeFieldObject
       {
         \fbox{\textcolor{yellow}{\textsf{Submit}}} %color?
       }
       {__hyp_xform_Submit}
     \MakeFieldObject
       {
         \fbox{\textcolor{yellow}{\textsf{SubmitP}}} %color?
       }
       {__hyp_xform_SubmitP}
  }
\ExplSyntaxOff
\let\@endForm\ltx@empty
\let\HyAnn@AbsPageLabel\ltx@empty
\let\Fld@pageobjref\ltx@empty

\ExplSyntaxOn
\newcount\HyAnn@Count
\HyAnn@Count=\ltx@zero
\def\HyAnn@AbsPageLabel
  {
    \global\advance\HyAnn@Count by\ltx@one
    %\zref@labelbyprops{HyAnn@\the\HyAnn@Count}{abspage}%
    %\zref@labelbylist {HyAnn@\the\HyAnn@Count} {l3pdf}
    %\zref@refused{HyAnn@\the\HyAnn@Count}%
    \__hyp_ref_label:en {HyAnn@\the\HyAnn@Count}{abspage}
    \__hyp_ref_check:en {HyAnn@\the\HyAnn@Count}{abspage}
  }%
\def\Fld@pageobjref
  {
    \__hyp_ref_if_exist:enT {HyAnn@\the\HyAnn@Count}{abspage}
      {
        /P~\pdf_object_pageref:n
          {
            \__hyp_ref_value:en{HyAnn@\the\HyAnn@Count}{abspage}
          }
      }
  }
\ExplSyntaxOff
\ExplSyntaxOn
%% check if the attr should be set through
%% hooks.
%% check if options are missing.
\def\@TextField[#1]#2{% parameters, label
  \def\Fld@name{#2}%
  \let\Fld@default\ltx@empty
  \let\Fld@value\@empty
  \def\Fld@width{\DefaultWidthofText}%
  \def\Fld@height{%
    \ifFld@multiline
      \DefaultHeightofTextMultiline
    \else
      \DefaultHeightofText
    \fi
  }%
  \begingroup
    \expandafter\HyField@SetKeys\expandafter{%
      \DefaultOptionsofText,#1%
    }%
    \PDFForm@Name
    \HyField@FlagsText
    \ifFld@hidden\def\Fld@width{1sp}\fi
    \ifx\Fld@value\@empty\def\Fld@value{\Fld@default}\fi
    \LayoutTextField{#2}{%
      \leavevmode
      \HyAnn@AbsPageLabel
      \Hy@escapeform\PDFForm@Text
      \pdfannot_box:nnnn
          {\Fld@width}
          {\Fld@height}
          {0pt} %is this correct?
          {\PDFForm@Text}
      \MakeTextField{\Fld@width}{\Fld@height}
      \HyField@AddToFields
    }%
  \endgroup
}
\providecommand\@curropt{}
\def\@ChoiceMenu[#1]#2#3{% parameters, label, choices
  \def\Fld@name{#2}
  \let\Fld@default\relax
  \let\Fld@value\relax
  \def\Fld@width{\DefaultWidthofChoiceMenu}
  \def\Fld@height{\DefaultHeightofChoiceMenu}
  \begingroup
    \Fld@menulength=0 %
    \@tempdima\z@
    \clist_map_variable:nNn { #3 } \@curropt
    %\@for\@curropt:=#3\do
      {%
        \expandafter\Fld@checkequals\@curropt==\\%
        \Hy@StepCount\Fld@menulength
        \settowidth{\@tempdimb}{\@currDisplay}%
        \ifdim\@tempdimb>\@tempdima\@tempdima\@tempdimb\fi
      }%
    \advance\@tempdima by~15\p@
    \begingroup
      \HyField@SetKeys{#1}
    \edef\x{\endgroup
      \noexpand\expandafter
      \noexpand\HyField@SetKeys
      \noexpand\expandafter{%
        \expandafter\noexpand\csname DefaultOptionsof%
          \ifFld@radio
            Radio%
          \else
            \ifFld@combo
              \ifFld@popdown
                PopdownBox%
              \else
                ComboBox%
              \fi
            \else
              ListBox%
            \fi
          \fi
        \endcsname
      }%
    }\x
    \HyField@SetKeys{#1}%
    \PDFForm@Name
    \ifFld@hidden\def\Fld@width{1sp}\fi
    \ifx\Fld@value\relax
      \let\Fld@value\Fld@default
    \fi
    \LayoutChoiceField{#2}{%
      \ifFld@radio
        \HyField@FlagsRadioButton
        \@@Radio{#3}%
      \else
        \begingroup
          \HyField@FlagsChoice
          \ifdim\Fld@width<\@tempdima
            \ifdim\@tempdima<1cm\@tempdima1cm\fi
            \edef\Fld@width{\the\@tempdima}%
          \fi
          \ifFld@combo
          \else
            \@tempdima=\the\Fld@menulength\Fld@charsize
            \advance\@tempdima by~\Fld@borderwidth bp %
            \advance\@tempdima by~\Fld@borderwidth bp %
            \edef\Fld@height{\the\@tempdima}%
          \fi
          \@@Listbox{#3}%
        \endgroup
      \fi
    }%
  \endgroup
}
\tl_new:N  \l_@@_RadioYes_tl
\tl_set:Nn \l_@@_RadioYes_tl { __hyp_xform_Ding }
\def\@@Radio#1{%
  \Fld@listcount=0~%
  %\show\Fld@default
  \EdefEscapeName\Fld@default{\Fld@default}%
  \clist_map_variable:nNn { #1 } \@curropt
  %\@for\@curropt:=#1\do
   {%
    \expandafter\Fld@checkequals\@curropt==\\%
    \EdefEscapeName\@currValue{\@currValue}%
    \Hy@StepCount\Fld@listcount
    \@currDisplay\space
    \leavevmode
    \HyAnn@AbsPageLabel
    \Hy@escapeform\PDFForm@Radio
    \pdfannot_box:nnnn
      {\Fld@width}
      {\Fld@height}
      {0pt} %is this correct?
      {
        \PDFForm@Radio
        /AP
         <<
         /N
          <<
          /\@currValue\c_space_tl \pdf_xform_ref:o {__hyp_xform_Ding}
          %/Off \c_space_tl \pdf_xform_ref:n {__hyp_xform_DingOff} %hm
          >>
         >>
      }
      {\fbox{  \MakeRadioField{\Fld@width}{\Fld@height}} }
     \int_compare:nNnT { \Fld@listcount} = { 1 }
      { \HyField@AddToFields }
    \c_space_tl % deliberate space between radio buttons
                % to do: --> should be configurable
  }%
}

\newcount\Fld@listcount
\def\@@Listbox#1
 {
  \HyField@PDFChoices{#1}
  \mode_leave_vertical:
  \HyAnn@AbsPageLabel
  \Hy@escapeform\PDFForm@List
  \pdf_link_user:nnn
       {widget} %perhaps we need more types??
       {\PDFForm@List}
       {\MakeChoiceField{\Fld@width}{\Fld@height}}
  \HyField@AddToFields
 }


\def\@PushButton[#1]#2{% parameters, label
  \def\Fld@name{#2}%
  \group_begin:
    \exp_args:No\HyField@SetKeys
     {
      \DefaultOptionsofPushButton,#1
     }
    \PDFForm@Name
    \prop_if_in:NnTF \g_pdfmeta_standard_prop {annot_action_no_A}
      {
        \msg_error:nn { hyp }{ pdfa-no-push-button }
        \LayoutPushButtonField
          {
            \mode_leave_vertical:
            \MakeButtonField{#2}
          }
      }
      {
        \HyField@FlagsPushButton
        \legacy_if:nT {Fld@hidden}
          {
            \def\Fld@width{1sp}
          }
        \LayoutPushButtonField
          {
            \mode_leave_vertical:
            \HyAnn@AbsPageLabel
            \Hy@escapeform\PDFForm@Push
            \hbox_set:Nn \l_tmpa_box { \MakeButtonField {#2}}
            \pdfannot_box:nnnn
              {\box_wd:N\l_tmpa_box}
              {\box_ht:N\l_tmpa_box}
              {\box_dp:N\l_tmpa_box} %is this correct?
              {\PDFForm@Push}
             {\box_use:N\l_tmpa_box}
            \HyField@AddToFields
          }
     }
  \group_end:
}

\def\@Submit[#1]#2
 {
   \def\Fld@width {\DefaultWidthofSubmit}
   \def\Fld@height{\DefaultHeightofSubmit}
   \group_begin:
     \exp_args:No\HyField@SetKeys
       {
         \DefaultOptionsofSubmit,#1
       }
   \HyField@FlagsPushButton
   \HyField@FlagsSubmit
   \legacy_if:nT { Fld@hidden }
     {
       \def\Fld@width{1sp}
     }
    \mode_leave_vertical:
    \HyAnn@AbsPageLabel
    \Hy@escapeform\PDFForm@Submit
    \hbox_set:Nn \l_tmpa_box { \MakeButtonField {#2}}
    \pdfannot_box:nnnn
      {\box_wd:N\l_tmpa_box}
      {\box_ht:N\l_tmpa_box}
      {\box_dp:N\l_tmpa_box} %is this correct?
      {
        \PDFForm@Submit
        /AP<<
          /N~\pdf_xform_ref:n {__hyp_xform_Submit}~
          /D~\pdf_xform_ref:n {__hyp_xform_SubmitP}
         >>
       }
      \HyField@AddToFields
      \box_use:N\l_tmpa_box

    \group_end:
 }

\def\@Reset[#1]#2
 {
   \def\Fld@width {\DefaultWidthofReset}
   \def\Fld@height{\DefaultHeightofReset}
   \group_begin:
     \exp_args:No\HyField@SetKeys
       {
         \DefaultOptionsofReset,#1
       }
     \mode_leave_vertical:
     \prop_if_in:NnTF \g_pdfmeta_standard_prop {annot_action_no_A}
       {
         \msg_error:nn { hyp }{ pdfa-no-reset-button }
         \MakeButtonField{#2}
       }
       {
         \HyField@FlagsPushButton
         \legacy_if:nT { Fld@hidden }
           { \def\Fld@width{1sp} }
         \HyAnn@AbsPageLabel
         \Hy@escapeform\PDFForm@Reset
         \hbox_set:Nn \l_tmpa_box { \MakeButtonField {#2}}
         \pdfannot_box:nnnn
           {\box_wd:N\l_tmpa_box}
           {\box_ht:N\l_tmpa_box}
           {\box_dp:N\l_tmpa_box} %is this correct?
           { \PDFForm@Reset }
         \HyField@AddToFields
         \box_use:N \l_tmpa_box
       }
    \group_end:
  }

\def\@CheckBox[#1]#2
  {% parameters, label
    \def\Fld@name{#2}
    \def\Fld@default{0}
    \group_begin:
      \def\Fld@width {\DefaultWidthofCheckBox}
      \def\Fld@height{\DefaultHeightofCheckBox}
      \exp_args:No\HyField@SetKeys
        {
          \DefaultOptionsofCheckBox,#1
        }
      \PDFForm@Name
      \HyField@FlagsCheckBox
      \legacy_if:nT { Fld@hidden }
        {
          \def\Fld@width{1sp}
        }
      \LayoutCheckField{#2}
        {
          \mode_leave_vertical:
          \HyAnn@AbsPageLabel
          \Hy@escapeform\PDFForm@Check
          \pdfannot_box:nnnn
            {\Fld@width}
            {\Fld@height}
            {0pt} %is this correct?
            {\PDFForm@Check}
          \HyField@AddToFields %check if this works with xelatex ...
        }
    \group_end:
  }
\ExplSyntaxOff

%hm. Should a luatex driver use type1 fonts in fields????
\ExplSyntaxOn
\def\Hy@FormObjects
  {
    \pdf_object_new:nn   {l_@@_encoding_pdfdoc_obj }   { dict }
    \pdf_object_new:nn   {l_@@_font_zapfdingbats_obj } { dict }
    \pdf_object_new:nn   {l_@@_font_helvetica_obj }    { dict }
    \pdf_object_write:nx {l_@@_encoding_pdfdoc_obj }
      {
        /Type/Encoding
        /Differences[
          24/breve/caron/circumflex/dotaccent/hungarumlaut/ogonek
          /ring/tilde
          \c_space_tl
          39/quotesingle
          \c_space_tl
          96/grave %
          \iow_newline:
          128/bullet/dagger/daggerdbl/ellipsis/emdash/endash/florin
          /fraction/guilsinglleft/guilsinglright/minus/perthousand
          /quotedblbase/quotedblleft/quotedblright/quoteleft
          /quoteright/quotesinglbase/trademark/fi/fl/Lslash/OE
          /Scaron/Ydieresis/Zcaron/dotlessi/lslash/oe/scaron/zcaron
          \iow_newline:
          164/currency
          \c_space_tl
          166/brokenbar
          \c_space_tl
          168/dieresis/copyright/ordfeminine
          \c_space_tl
          172/logicalnot/.notdef/registered/macron/degree/plusminus
          /twosuperior/threesuperior/acute/mu
          \c_space_tl
          183/periodcentered/cedilla/onesuperior/ordmasculine
          \c_space_tl
          188/onequarter/onehalf/threequarters
          \iow_newline:
          192/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
          /Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave
          /Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute
          /Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
          /Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
          /agrave/aacute/acircumflex/atilde/adieresis/aring/ae
          /ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
          /iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
          /ocircumflex/otilde/odieresis/divide/oslash/ugrave
          /uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
         ]
      }
    \pdf_object_write:nn {l_@@_font_zapfdingbats_obj }
      {
        /Type/Font
        /Subtype/Type1
        /Name/ZaDb
        /BaseFont/ZapfDingbats
      }
    \pdf_object_write:nx {l_@@_font_helvetica_obj }
      {
        /Type/Font
        /Subtype/Type1
        /Name/Helv
        /BaseFont/Helvetica
        /Encoding~\pdf_object_ref:n { l_@@_encoding_pdfdoc_obj }
      }
  \global\let\Hy@FormObjects\relax
  }
\ExplSyntaxOff
\providecommand*{\Fld@pageobjref}{}
\ifcsname pdf@escapestring\endcsname
  \def\Hy@escapeform#1{%
    \ifHy@pdfescapeform
      \let\Hy@escapestring\pdfescapestring
    \else
      \let\Hy@escapestring\@firstofone
    \fi
  }%
  \Hy@escapeform{}%
\else
  \let\Hy@escapestring\@firstofone
  \def\Hy@escapeform#1{%
    \ifHy@pdfescapeform
      \def\Hy@escapestring##1{%
        \noexpand\Hy@escapestring{\noexpand##1}%
      }%
      \edef\Hy@temp{#1}%
      \expandafter\Hy@@escapeform\Hy@temp\Hy@escapestring{}\@nil
      \def\Hy@escapestring##1{%
        \@ifundefined{Hy@esc@\string##1}{%
          ##1%
          \ThisShouldNotHappen
        }{%
          \csname Hy@esc@\string##1\endcsname
        }%
      }%
    \else
      \let\Hy@escapestring\@firstofone
    \fi
  }%
  \def\Hy@@escapeform#1\Hy@escapestring#2#3\@nil{%
    \ifx\\#3\\%
    \else
      \expandafter
      \Hy@pstringdef\csname Hy@esc@\string#2\endcsname{#2}% probably string-hex
      \ltx@ReturnAfterFi{%
        \Hy@@escapeform#3\@nil
      }%
    \fi
  }%
\fi
\def\PDFForm@Name{%
  \PDFForm@@Name\Fld@name
  \ifx\Fld@altname\relax
  \else
    \PDFForm@@Name\Fld@altname
  \fi
  \ifx\Fld@mappingname\relax
  \else
    \PDFForm@@Name\Fld@mappingname
  \fi
}
\def\PDFForm@@Name#1{%
  \begingroup
    \ifnum\Hy@pdfversion<5 % implementation note 117, PDF spec 1.7
      \ifHy@unicode
        \Hy@unicodefalse
      \fi
    \fi
    \pdfstringdef\Hy@gtemp#1%
  \endgroup
  \let#1\Hy@gtemp
}
\def\Fld@X@additionalactions{%
  \ifx\Fld@keystroke@code\@empty
  \else
    /K<</S/JavaScript/JS(\Hy@escapestring{\Fld@keystroke@code})>>%
  \fi
  \ifx\Fld@format@code\@empty
  \else
    /F<</S/JavaScript/JS(\Hy@escapestring{\Fld@format@code})>>%
  \fi
  \ifx\Fld@validate@code\@empty
  \else
    /V<</S/JavaScript/JS(\Hy@escapestring{\Fld@validate@code})>>%
  \fi
  \ifx\Fld@calculate@code\@empty
  \else
    /C<</S/JavaScript/JS(\Hy@escapestring{\Fld@calculate@code})>>%
  \fi
  \ifx\Fld@onfocus@code\@empty
  \else
    /Fo<</S/JavaScript/JS(\Hy@escapestring{\Fld@onfocus@code})>>%
  \fi
  \ifx\Fld@onblur@code\@empty
  \else
    /Bl<</S/JavaScript/JS(\Hy@escapestring{\Fld@onblur@code})>>%
  \fi
  \ifx\Fld@onmousedown@code\@empty
  \else
    /D<</S/JavaScript/JS(\Hy@escapestring{\Fld@onmousedown@code})>>%
  \fi
  \ifx\Fld@onmouseup@code\@empty
  \else
    /U<</S/JavaScript/JS(\Hy@escapestring{\Fld@onmouseup@code})>>%
  \fi
  \ifx\Fld@onenter@code\@empty
  \else
    /E<</S/JavaScript/JS(\Hy@escapestring{\Fld@onenter@code})>>%
  \fi
  \ifx\Fld@onexit@code\@empty
  \else
    /X<</S/JavaScript/JS(\Hy@escapestring{\Fld@onexit@code})>>%
  \fi
}
\ExplSyntaxOn
\def\Fld@additionalactions
 {%
  \exp_args:Ne\str_if_eq:nnF {\Fld@X@additionalactions}{}
    {
      \prop_if_in:NnF \g_pdfmeta_standard_prop {annot_widget_no_AA}
        {/AA<<\Fld@X@additionalactions>>}
    }
 }
\ExplSyntaxOff
\def\Fld@annotnames{%
  /T(\Fld@name)%
  \ifx\Fld@altname\relax
  \else
    /TU(\Fld@altname)%
  \fi
  \ifx\Fld@mappingname\relax
  \else
    /TM(\Fld@mappingname)%
  \fi
}
\ExplSyntaxOn
\def\PDFForm@Check
  {
    /Subtype/Widget
    ~\Fld@annotflags
    ~\Fld@pageobjref
    ~\Fld@annotnames
    /FT/Btn
   \Fld@flags
   /Q~\Fld@align
   /BS<</W~\Fld@borderwidth /S/\Fld@borderstyle>>
   /AP
     <<
      /N
        <<
          /Yes~\pdf_xform_ref:o{\l_@@_CheckmarkYes_tl}
          /Off~\pdf_xform_ref:o{\l_@@_CheckmarkOff_tl}
        >>
    >>
  /MK<<
    \int_compare:nNnF {\Fld@rotation}={0}
      {
        /R~\Fld@rotation
      }
    \tl_if_empty:NF\Fld@bordercolor
      {
        /BC[\Fld@bordercolor]
      }
    \tl_if_empty:NF\Fld@bcolor
      {
        /BG[\Fld@bcolor]
      }
    /CA(\Hy@escapestring{\Fld@cbsymbol})%
  >>
  /DA
    (
      /ZaDb~\strip@pt\Fld@charsize\c_space_tl Tf
      \tl_if_empty:NF \Fld@color
        {
          \c_space_tl \Fld@color
        }
    )
  /H/P
  \legacy_if:nTF {Fld@checked}
    {
      /V/Yes /AS/Yes
    }
    {
      /V/Off /AS/Off
    }
  \Fld@additionalactions
}
\ExplSyntaxOff
\ExplSyntaxOn
\prop_if_in:NnF \g_pdfmeta_standard_prop {annot_action_no_A}
  {
   \def\PDFForm@Push
     {
       /Subtype/Widget
       ~\Fld@annotflags
       ~\Fld@pageobjref
       ~\Fld@annotnames
       /FT/Btn
       ~\Fld@flags
       /H/P
       /BS<</W~\Fld@borderwidth/S/\Fld@borderstyle>>
       \bool_if:nT
         {
           !\int_compare_p:nNn {\Fld@rotation} = {0}
          ||
           \tl_if_exist_p:N \Fld@bordercolor
         }
         {
           /MK
             <<
               \int_compare:nNnF {\Fld@rotation} = {0}
                 {
                   /R~\Fld@rotation
                 }
               \tl_if_exist:NT \Fld@bordercolor
                 {
                   /BC[\Fld@bordercolor]
                 }
             >>
          }
       /A<</S/JavaScript/JS(\Hy@escapestring{\Fld@onclick@code})>>
       \Fld@additionalactions
     }
  }
\ExplSyntaxOff
\def\PDFForm@List{%
  /Subtype/Widget%
  \Fld@annotflags
  \Fld@pageobjref
  \Fld@annotnames
  /FT/Ch%
  \Fld@flags
  /Q \Fld@align
  /BS<</W \Fld@borderwidth/S/\Fld@borderstyle>>%
  \ifcase0\ifnum\Fld@rotation=\z@   \else 1\fi
          \ifx\Fld@bordercolor\relax\else 1\fi
          \ifx\fld@bcolor\relax     \else 1\fi
          \space
  \else
    /MK<<%
      \ifnum\Fld@rotation=\z@
      \else
        /R \Fld@rotation
      \fi
      \ifx\Fld@bordercolor\relax
      \else
        /BC[\Fld@bordercolor]%
      \fi
      \ifx\Fld@bcolor\relax
      \else
        /BG[\Fld@bcolor]%
      \fi
    >>%
  \fi
  /DA(/Helv \strip@pt\Fld@charsize\space Tf%
      \ifx\Fld@color\@empty\else\space\Fld@color\fi)%
  \Fld@choices
  \Fld@additionalactions
}
\ExplSyntaxOn
\def\PDFForm@Radio
  {
    /Subtype/Widget
    ~\Fld@annotflags
    ~\Fld@pageobjref
    ~\Fld@annotnames
    /FT/Btn
   \Fld@flags
   /H/P
   /BS<</W~\Fld@borderwidth/S/\Fld@borderstyle>>
   /MK<<
    \ifnum\Fld@rotation=\z@
    \else
      /R~\Fld@rotation
    \fi
    \ifx\Fld@bordercolor\relax
    \else
      /BC[\Fld@bordercolor]%
    \fi
    \ifx\Fld@bcolor\relax
    \else
      /BG[\Fld@bcolor]%
    \fi
     /CA(\Hy@escapestring{\Fld@radiosymbol})%
    >>
    /DA(/ZaDb~\strip@pt\Fld@charsize\space Tf%
      \ifx\Fld@color\@empty\else\space\Fld@color\fi)%
   \ifx\Fld@default\@empty
    /V/Off%
    /DV/Off%
   \else
    /V/\Fld@default
    /DV/\Fld@default
   \fi
   \Fld@additionalactions
 }
\ExplSyntaxOff
\ExplSyntaxOn
% Does an appeareance dict make sense here?
\def\PDFForm@Text
  {
    /Subtype/Widget
    ~\Fld@annotflags
    ~\Fld@pageobjref
    ~\Fld@annotnames
    /FT/Tx
    ~\Fld@flags
    /Q~\Fld@align
    /BS<</W~\Fld@borderwidth\c_space_tl /S /\Fld@borderstyle>>
   \bool_if:nT
     {
        !\int_compare_p:nNn {\Fld@rotation} = {0}
       ||
        \tl_if_exist_p:N \Fld@bordercolor
       ||
        \tl_if_exist_p:N \Fld@bcolor
     }
     {
       /MK
         <<
           \int_compare:nNnF {\Fld@rotation} = {0}
             {
               /R~\Fld@rotation
             }
           \tl_if_exist:NT \Fld@bordercolor
             {
               /BC[\Fld@bordercolor]
             }
           \tl_if_exist:NT \Fld@bcolor
             {
               /BG[\Fld@bcolor]
             }
        >>
     }
   /DA
     (
       /Helv~\strip@pt\Fld@charsize\c_space_tl Tf
       \tl_if_empty:NF {\c_space_tl\Fld@color}
     )
   /DV(\Hy@escapestring{\Fld@default})
   /V(\Hy@escapestring{\Fld@value})
   ~\Fld@additionalactions
   \int_compare:nNnT { \Fld@maxlen}>{0}
     {
       /MaxLen~\Fld@maxlen
     }
  }
\ExplSyntaxOff

\def\PDFForm@Submit{%
  /Subtype/Widget%
  \Fld@annotflags
  \Fld@pageobjref
  \Fld@annotnames
  /FT/Btn%
  \Fld@flags
  /H/P%
  /BS<</W \Fld@borderwidth/S/\Fld@borderstyle>>%
  \ifcase0\ifnum\Fld@rotation=\z@   \else 1\fi
          \ifx\Fld@bordercolor\relax\else 1\fi
          \space
  \else
    /MK<<%
      \ifnum\Fld@rotation=\z@
      \else
        /R \Fld@rotation
      \fi
      \ifx\Fld@bordercolor\relax
      \else
        /BC[\Fld@bordercolor]%
      \fi
    >>%
  \fi
  /A<<%
    /S/SubmitForm%
    /F<<%
      /FS/URL%
      /F(\Hy@escapestring{\Form@action})%
    >>%
    \Fld@submitflags
  >>%
  \Fld@additionalactions
}
\ExplSyntaxOn
\prop_if_in:NnF \g_pdfmeta_standard_prop {annot_action_no_A}
    {
       \def\PDFForm@Reset{%
         /Subtype/Widget%
         \Fld@annotflags
         \Fld@pageobjref
         \Fld@annotnames
         /FT/Btn%
         \Fld@flags
         /H/P%
         /DA(/Helv~\strip@pt\Fld@charsize\space Tf~0~0~1~rg)%
         \ifcase0\ifnum\Fld@rotation=\z@   \else 1\fi
                 \ifx\Fld@bordercolor\relax\else 1\fi
                 \space
         \else
           /MK<<%
             \ifnum\Fld@rotation=\z@
             \else
               /R~\Fld@rotation
             \fi
             \ifx\Fld@bordercolor\relax
             \else
               /BC[\Fld@bordercolor]%
             \fi
           >>%
         \fi
         /BS<</W \Fld@borderwidth/S/\Fld@borderstyle>>%
         /A<</S/ResetForm>>%
         \Fld@additionalactions
       }%
   }
\ExplSyntaxOff
% UF: removed Hy@writebookmark
%     \Hy@currentbookmarklevel{0}
%     \Hy@numberline
%     \@@writetorep
%     counter{bookmark@seq@number}
% removed \HyPsd@SanitizeForOutFile, not needed
% removed \currentpdfbookmark, defined by bookmark,
% should use \newcommand there
% removed \subpdfbookmark, defined by bookmark,
% should use \newcommand there
% removed \belowpdfbookmark, defined by bookmark,
% should use \newcommand there
% removed \pdfbookmark, defined by bookmark,
% \BOOKMARK
% \@BOOKMARK
%% \RequirePackage{rerunfilecheck}[2009/12/10]
%% removed \Hy@OutlineRerunCheck, unneeded with bookmark
%% removed \ReadBookmarks / unneeded with bookmark.
%% removed \Hy@OutlineName
%% removed \check@bm@number
%% removed \calc@bm@number

\ifHy@implicit
\else
  \expandafter\endinput
\fi
\newlength\Hy@SectionHShift
\def\Hy@SectionAnchorHref#1{%
  \ifx\protect\@typeset@protect
    \Hy@@SectionAnchor{#1}%
  \fi
}
\DeclareRobustCommand*{\Hy@@SectionAnchor}[1]{%
  \leavevmode
  \hbox to 0pt{%
    \kern-\Hy@SectionHShift
    \Hy@raisedlink{%
      \hyper@anchorstart{#1}\hyper@anchorend
    }%
    \hss
  }%
}
\let\H@old@ssect\@ssect
\def\@ssect#1#2#3#4#5{%
  \Hy@MakeCurrentHrefAuto{section*}%
  \setlength{\Hy@SectionHShift}{#1}%
  \begingroup
    \toks@{\H@old@ssect{#1}{#2}{#3}{#4}}%
    \toks\tw@\expandafter{%
      \expandafter\Hy@SectionAnchorHref\expandafter{\@currentHref}%
      #5%
    }%
  \edef\x{\endgroup
    \the\toks@{\the\toks\tw@}%
  }\x
}
\let\H@old@schapter\@schapter
\def\@schapter#1{%
  \begingroup
    \let\@mkboth\@gobbletwo
    \Hy@MakeCurrentHrefAuto{\Hy@chapapp*}%
    \Hy@raisedlink{%
      \hyper@anchorstart{\@currentHref}\hyper@anchorend
    }%
  \endgroup
  \H@old@schapter{#1}%
}
\ltx@IfUndefined{@chapter}{}{%
  \let\Hy@org@chapter\@chapter
  \def\@chapter{%
    \def\Hy@next{%
      \Hy@MakeCurrentHrefAuto{\Hy@chapapp*}%
      \Hy@raisedlink{%
        \hyper@anchorstart{\@currentHref}\hyper@anchorend
      }%
    }%
    \ifnum\c@secnumdepth>\m@ne
      \ltx@IfUndefined{if@mainmatter}%
      \iftrue{\csname if@mainmatter\endcsname}%
        \let\Hy@next\relax
      \fi
    \fi
    \Hy@next
    \Hy@org@chapter
  }%
}
\let\H@old@part\@part
\begingroup\expandafter\expandafter\expandafter\endgroup
\expandafter\ifx\csname chapter\endcsname\relax
  \let\Hy@secnum@part\z@
\else
  \let\Hy@secnum@part\m@ne
\fi
\def\@part{%
  \ifnum\Hy@secnum@part>\c@secnumdepth
    \phantomsection
  \fi
  \H@old@part
}
\let\H@old@spart\@spart
\def\@spart#1{%
  \Hy@MakeCurrentHrefAuto{part*}%
  \Hy@raisedlink{%
    \hyper@anchorstart{\@currentHref}\hyper@anchorend
  }%
  \H@old@spart{#1}%
}
\let\H@old@sect\@sect
\def\@sect#1#2#3#4#5#6[#7]#8{%
  \ifnum #2>\c@secnumdepth
    \expandafter\@firstoftwo
  \else
    \expandafter\@secondoftwo
  \fi
  {%
    \Hy@MakeCurrentHrefAuto{section*}%
    \setlength{\Hy@SectionHShift}{#3}%
    \begingroup
      \toks@{\H@old@sect{#1}{#2}{#3}{#4}{#5}{#6}[{#7}]}%
      \toks\tw@\expandafter{%
        \expandafter\Hy@SectionAnchorHref\expandafter{\@currentHref}%
        #8%
      }%
    \edef\x{\endgroup
      \the\toks@{\the\toks\tw@}%
    }\x
  }{%
    \H@old@sect{#1}{#2}{#3}{#4}{#5}{#6}[{#7}]{#8}%
  }%
}
\expandafter\def\csname Parent-4\endcsname{}
\expandafter\def\csname Parent-3\endcsname{}
\expandafter\def\csname Parent-2\endcsname{}
\expandafter\def\csname Parent-1\endcsname{}
\expandafter\def\csname Parent0\endcsname{}
\expandafter\def\csname Parent1\endcsname{}
\expandafter\def\csname Parent2\endcsname{}
\expandafter\def\csname Parent3\endcsname{}
\expandafter\def\csname Parent4\endcsname{}
%%
%% End of file `hgeneric-experimental.def'.
%</package>
%    \end{macrocode}
